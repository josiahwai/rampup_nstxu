%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

USAGE:
   eq = gsdesign(spec, init, config)

PURPOSE:
   Design a 2-D (Grad-Shafranov) equilibrium by minimizing
   cost function: norm(sum(weights.param.*(targets.param-param)))

INPUTS:

spec, specification of the equilibrium to be designed.
      This structure-variable may contain:
      targets, weights, limits, locks
      
      targets make up the error vector in the cost function
      All weights = 1 by default
      Setting a target or its weight to NaN removes it from the error vector
      
      limits have two columns: lower, upper limit
      Use -inf or +inf for no limit, ex: limits.betap = [0 inf]
      
      locks makes a quantity equal to exactly the locked value
      Use NaN for any quantity that should not be locked

      Parameters that can be designed:

      SEPARATRIX specified by: targets.rsep, targets.zsep
      The error vector is weights.sep.*(psisep-psibry)
      where psisep is flux at rsep, zsep
      A (small) set of points can be locked with:
      locks.rsep, locks.zsep, making fluxes exactly equal to psibry
      Limits for the boundary can be set with 2-column matrices:
      limits.rsep, limits.zsep, forcing flux to equal psibry 
      somewhere between each pair of points in columns 1 and 2.

      BOUNDARY-DEFINING POINT specified by: targets.rbdef, targets.zbdef
      The error vector is weights.bdef*(psibdef-psibry)
      where psibdef is flux at targets.rbdef, targets.zbdef
      Alternatively use locks.rbdef, locks.zbdef
      to make psibdef at locks.rbdef, locks.zbdef exactly equal to psibry
      The bdef point is prevented from jumping to other locations by
      limits on flux at "wrong-way points" where bdef might otherwise jump.
      The minimum normalized poloidal flux difference between such points
      and the boundary is set with limits.bdef_dpsibar (default = 0.01)
      If limits.bdef_dpsibar is too large these other points may 
      come and go between iterations, causing convergence problems
      The actual bdef is only guaranteed to be near rbdef, zbdef
      If bdef is an x-point it may end up at a different poloidal angle
      than rbdef, zbdef. Use targets.rx, targets.zx or locks.rx, locks.zx 
      if more control of bdef position is desired for a diverted plasma.
      
      X-POINTS specified by: targets.rx, targets.zx
      The error vector contains weights.x.*[dpsixdr dpsixdz]
      for each point rx, zx, and the target is zero gradient
      Points can be locked with: locks.rx, locks.zx
      Limits can be specified with limits.rx and limits.zx
      The resulting x-point for target #i will stay within rectangle
      limits.rx(i,1:2), limits.zx(i,1:2). If limits.rx(i,:) has more 
      than 2 elements > 0 these together with limits.zx(i,:) specify 
      corners in a polygon and the x-point will stay within this polygon.
      All x-points are shown when limits have been specified for x-points
      Points with r <= 0 are ignored for targets, locks, limits.

      SNOWFLAKE-POINTS specified by: targets.rsnf, targets.zsnf
      Extra settings: targets.tsnf, targets.nsnf, targets.rhosnf
      The flux gradient is controlled to zero at rsnf, zsnf; and
      fluxes are controlled to equal the flux at rsnf, zsnf at nsnf 
      surrounding points a distance rhosnf away with one of those 
      being at an angle tsnf in degrees
      Default for targets.nsnf = 6 (8,10,12,... possible if many coils exist)
      Default for targets.tsnf = 40*sign(zmaxis-zsnf)
      Default for targets.rhosnf = (dr+dz)/2
      Default for weights.snf = 1
      The interpolation method does not allow perfect snowflakes but
      with high grid resolution perfection can be approached

      SCALAR QUANTITIES
      Targets, locks, limits can be specified for:
	cpasma = total plasma current
	li     = normalized inductance
	betap  = poloidal beta
	betan  = normalized beta
	q0     = q at center (not yet implemented)
	q95    = q at rhot = 0.95 (not yet implemented)
	qmin   = q at minimum q (not yet implemented)
	psibry = the flux at the boundary
	psimag = the flux at the axis
	psipla = plasma flux = current-density-weighted average flux
	fluxexp = flux expansion (help calc_fluxexp) calculated by:
	   calc_fluxexp(eq, ...
	       spec.targets.rfluxexp, ...
	       spec.targets.zfluxexp, ...
	       spec.targets.dfluxexp)
        fluxerror = maximum error in normalized poloidal flux
	  By default fluxerror is locked to 0. Including targets.fluxerror = 0 
	  and weights.fluxerror may improve convergence in some cases.
	  Default for limits.fluxerror = [0 1e-9]
	  After cost function is minimized iterations continue until
	  fluxerror < limits.fluxerror(2) and stops decreasing
	  or fluxerror < limits.fluxerror(1) which stops iterations immediately
	  Set limits.fluxerror(1) > 0 to avoid iterations to perfect convergence

      DIAGNOSTIC SIGNALS
      Targets, locks, limits can be specified for:
	fl = flux loops
	bp = magnetic probes
	rog = rogowski loops
      Use nan to omit elements in target and lock vectors
        e.g. targets.bp = [4 nan 5] will set targets for bp(1) and bp(3)
      Limits are size n by 2 where column 1 is min and column 2 is max.
        Use -inf or +inf where there is no limit, example:
	limits.rog = [-inf inf; 1e6 inf] to place lower limit on rog(2).

      PROFILES ARE NOT YET IMPLEMENTED EXCEPT FOR THIS DOCUMENTATION
      PROFILES (specified at points of normalized poloidal flux)
      targets, locks, limits can be specified for:
	pres = pressure (at nr psibar points, same as EFIT)
	qpsi = q-profile (at nr psibar points, same as EFIT)
      Use nan to omit elements in target and lock vectors
      limits are size n by 2 where column 1 is min and column 2 is max
        and -inf or +inf are used where there is no limit.
	By default limits.pres = [zeros(nr,1) inf(nr,1)].

      COIL CURRENTS
      Coil currents are normally varied to minimize
      the cost function but can also be among targets as
	targets.ic & weights.ic
      Specify nan for coils that have no target value.
      To lock a coil current at a value, use locks.ic
      Specify nan for coils that aren't locked.
      To limit range of coil currents, use limits.ic
      The size(limits) = [nc,2], with lower and upper limit
      Default limits exist for DIII-D, NSTXU, KSTAR, EAST, ITER
      Connections put extra constraints on coil currents.
      The degrees of freedom are referred to as circuits.		
        spec.cccirc assigns a circuit (with sign) to each coil
      Example: cccirc = [1 -1 2 3] makes 3 circuits with
      ic(1) = -ic(2) as the first circuit current, then ic(3)
      is the second circuit current, and ic(4) the third.
        spec.buscode connects coils to a bus and reduces
      number of circuits by 1 by making spec.buscode*ic = 0
      For DIII-D an old patch panel can be loaded and used by:
      PP = get_PP_objs(shot), spec.buscode = [0 0 PP.bus_code]

      VESSEL CURRENTS
      By default vessel currents are locked to zero, locks.iv = zeros(nv,1)
      However, if spec includes a targets.iv all vessel currents are
      instead unlocked by default, locks.iv = nan(nv,1)
      The defaults can be overridden by including locks.iv in spec
      Targets and weights for currents in vessel elements are given by
	targets.iv & weights.iv
      
      FLUX AT COILS
      Targets for fluxes at coils can be specified by:
        targets.psic, targets.dpsicdic, targets.ic0
      The actual flux target for the coils are:
      tpsic = targets.psic + targets.dpsicdic.*(ic-targets.ic0)
      The weights for targets, locks, limits are specified with
        weights.psic, locks.psic, limits.psic
      By default all quantities are zero
      One use is to design equilibrium that obeys, Vps = Rc*ic + Vind
      
      FLUX AT VESSEL
      Targets for fluxes at vessel elements can be specified by:
        targets.psiv, targets.dpsivdiv, targets.iv0
      The actual flux target for the coils are:
      tpsiv = targets.psiv + targets.dpsivdiv.*(iv-targets.iv0)
      The weights for targets, locks, limits are specified with
        weights.psiv, locks.psiv, limits.psiv
      By default all quantities are zero
      One use is to design equilibrium that obeys, 0 = Rv*iv + Vind
      
      FORCES ON COILS (frc & fzc)
      For radial forces on coils, use:
        weights.frc, targets.frc, locks.frc, limits.frc
      For vertical forces on coils, use:
        weights.fzc, targets.fzc, locks.fzc, limits.fzc
      
      SWITCHES
      spec.max_iterations, overrides config.max_iterations
      spec.fig, controls what figure window gsdesign uses:
        -1 opens new figure
         0 opens new figure if last one has changed (default)
	>0 opens the figure spec.fig
      spec.showgrid, display the grid in geometry picture
      spec.showallxpoints, show all x-points
        showallxpoints=1 by default when limits specified for x-points
      spec.plot_settings, overrides config.plot_settings, see below

init, initial equilibrium
      The TOROIDAL FIELD is specified by init.rzero and init.bzero
      If init contains efit-specific fields these will be copied
      to the output eq to facilitate interfacing with efit codes

config, Toksys description of the tokamak (a.k.a. tok_data_struct)
        REQUIRED fields are:
          tokamak,     Name of tokamak such as 'DIII-D' or 'EAST'
          rg,          radius of grid points [m]
	  zg,          height of grid points [m]
	  mcc,         mutuals between coils
	  mcv,         mutuals between coil and vessel elements
	  mvv,         mutuals between vessel elements
	  mpc,         mutuals between grid and coil elements
	  mpv,         mutuals between grid and vessel elements
	  mpp,         mutuals between grid points
	  limdata,     R, Z coordinates of limiter
          imks,        1 means MKS units are used
          iterminal,   1 means that ic gives current in 1-turn
	  fcnturn,     number of turns in the F coils
	  def_connect, used by the efit interface

        OPTIONAL fields are:
          pres0,          template pressure profile
          pprime0,        template pprime profile, used if pres0 is missing
          fpol0,          template fpol profile
          ffprim0,        template ffprim profile, used if fpol0 is missing
	  constraints,    how profiles (pres and fpol) may vary
	                  0 = no constraint, both pres and fpol vary
		              with nkn+2 degrees of freedom
		          1 = only 3 degrees of freedom, 
		              pres = a scaled pres0
		              fpol = a scaled and peaked fpol0
	  psikn,          psibar for knots, default = linspace(0,1,nkn+1)
	  nkn,            number of knots, default = 1
          max_iterations, default = 99, iterations stop when cost function
	                  has been minimized or iterations = max_iterations
			  or user clicks stop button in figure
     plot_settings.nxptmax, maximum number of x-points in list (default 9)
     plot_settings.nflux, number of flux surface contours (default 8)
     plot_settings.SOL.n, number of SOL contours to plot (default 0)
     plot_settings.SOL.d, distance between contours in outboard midplane (1e-3)
     plot_settings.SymbolSize, number or struct with relative symbol sizes
     Examples:
       plot_settings.SymbolSize = 0.5; % reduce all sizes to 50%
       plot_settings.SymbolSize.target.sep = 2; % double size of these
       plot_settings.SymbolSize.wrongway = 0; % don't show wrong-way points
       Symbol sizes that can be modified:
         locks.x, locks.sep, locks.snf, locks.bdef
         limits.x, limits.sep, limits.snf, limits.bdef
         targets.x, targets.sep, targets.snf, targets.bdef
         x, bdef, wrongway
	  
	  	                 
OUTPUTS:

eq,   the designed equilibrium (eq.descriptions for more info)
figure with subplots:
      Conductors: currents in coils, vessel in green, limits in red, blue
      Rp',ff'/mu0R (where R=rmaxis) versus normalized poloidal flux
      Error vector = weights.*(eq values - target values)
        (Labels appear on error elements when zooming in on a few) 
      flux error = (psizr - psizr_pla-psizr_app)/(psimag-psibry)
        ( < 1e-3 for good solution to the Grad-Shafranov equation)

List of scripts that demonstrate use of gsdesign:
gsdesign_demo_iter      - Design the ITER shape for ITER
gsdesign_demo_d3d_DN    - Design of EAST-like DN plasma for DIII-D
gsdesign_demo_d3d_DSNF  - Design of a double snowflake plasma for DIII-D
gsdesign_demo_east_LSNF - Design a lower-snowflake plasma for EAST
gsdesign_demo_east_DSNF - Design a double-snowflake plasma for EAST
gsdesign_demo_kstar_ISS - Design ITER-similar-shape (ISS) for KSTAR
gsdesign_iss            - Automatic design of ISS for 9 tokamaks
