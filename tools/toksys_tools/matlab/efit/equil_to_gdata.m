 function [gdata,ireadok]= equil_to_gdata(equil,tms)
  %
%  USAGE:  [gdata,ireadok] = equil_to_gdata(equil, tms);
%  USAGE:  [gdata,ireadok] = equil_to_gdata(mds_string); % calls read_mds_func
%
%
%  PURPOSE: Convert equil data generated by read_mds_eq_func to read_gfile_func
%
%  INPUTS: <default>
%     equil=	   equilibrium data: equil=read_mds_eq_func(shot,tree,server);
%
%     mds_string=  optionally if equil is a string containing MDS+ tree information:
%                  format: <Server><.><tree>.shot.time
%                  Examples:
%                  'D3D.EFIT09.g131498.02600'
%                  'D3D.EFITRT1.131498.02600'
%                  '.g131498.02600' => 'D3D.EFIT01.g131498.02600'
%     tms=	   time [ms] to use from equil data 
%
%  OUTPUTS:
%    gdata =   data structure containing EFIT G-file variables
%    ireadok = flag to report good read of gfile (0=bad, 1=good)
%
%  RESTRICTIONS:
%   MDS EFIT Tree must exist for call with mds_string string convention
% 
%  NOTE TESTED WITH ANY MDS+ except D3D
%  
 
%  METHOD: Based on read_gfile_func & read_mds_eq_func  

%  WRITTEN BY:  Jim Leuer ON 8Mar2010
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% ================================================================
% See if input is a 'DOT' format convention and then get data from MDS+
% ================================================================

  if isstr(equil) | nargin <=1 
    mds_string= equil;
    id= strfind(mds_string,'.'); % Format: SERVER.TREE.SHOTNUM.TIME	
    if length(id) >=2      % must have 2 dots: .SHOTNUM.TIME
      [shot,tms,tree,server] = shot_from_gfile(mds_string); % Dot Format
      disp([' % NOTE equil_to_gdata is reading MDS+ for: ',mds_string]);

      jphi= []; % make sure this is variable and not function
      [equil,neq,eq] = read_mds_eq_func1(shot,tree,server);
	
     else % if length(id)<=2

      disp([' %ERROR equil_to_gdata: needs "server.tree.shot.time" ']);
      gdata=[];
      ireadok= 0;
      return
     end % if ~isempty(id)
   end % if isstr(equil)
 
% =========================================================================
% Get only ONE time
  if ~isempty(equil)
    if ~isfield(equil,'tms')
      if strcmp(upper(server),'NSTX')
         equil.time=  eq.results.geqdsk.gtime;
         equil.tms=  eq.results.geqdsk.gtime*1e+3;
      elseif strcmp(upper(server),'KSTAR') | findstr(upper(tree),'KSTR') |...
             strcmp(upper(server),'EAST') | findstr(upper(tree),'EAST')
         equil.time=  eq.results.geqdsk.gtime;
         equil.tms=  eq.results.geqdsk.gtime*1e+3;         
      else % DIIID
         equil.time=  eq.results.geqdsk.gtime*1e-3;
         equil.tms= eq.results.geqdsk.gtime;
      end       
    end
    
    if tms >= equil.tms(1) & tms <= equil.tms(end)   
       idx= interp1(equil.tms,1:length(equil.tms),tms,'nearest');
    else
      disp([' %ERROR equil_to_gdata, tms: ' num2str(tms) ...
            ' not between equil.tms ', ...
	    num2str(equil.tms(1)) ' ' num2str(equil.tms(end))]);
      ireadok= 0;
      gdata= [];
      return
    end
% =========================================================================
 
  gdef = gfile_def; % definitions of all variables read in from G-file

  gdata = struct( ...	
    'gdef',   gdef, ...                   
    'brsp',   equil.gdata(idx).brsp, ... 
    'bzero',  equil.gdata(idx).bzero, ...
    'cpasma', equil.gdata(idx).cpasma, ...
    'ecase',  equil.gdata(idx).ecase, ...
    'ecurrt', equil.gdata(idx).ecurrt, ...
    'ffprim', equil.gdata(idx).ffprim, ...
    'fpol',   equil.gdata(idx).fpol, ...
    'limitr', equil.gdata(idx).limitr, ...
    'nbbbs',  equil.gdata(idx).nbbbs, ...
    'nh',     equil.gdata(idx).nh, ...
    'nw',     equil.gdata(idx).nw, ...
    'pcurrt', equil.gdata(idx).pcurrt, ...
    'pprime', equil.gdata(idx).pprime, ...
    'pres',   equil.gdata(idx).pres, ...
    'psirz',  equil.gdata(idx).psirz, ...
    'qpsi',   equil.gdata(idx).qpsi, ...
    'rbbbs',  equil.gdata(idx).rbbbs, ...
    'rgrid1', equil.gdata(idx).rgrid1, ...
    'rmaxis', equil.gdata(idx).rmaxis, ...
    'rzero',  equil.gdata(idx).rzero, ...
    'ssibry', equil.gdata(idx).ssibry, ...
    'ssimag', equil.gdata(idx).ssimag, ...
    'xdim',   equil.gdata(idx).xdim, ...
    'xlim',   equil.gdata(idx).xlim, ...
    'ylim',   equil.gdata(idx).ylim, ...
    'zbbbs',  equil.gdata(idx).zbbbs, ...
    'zdim',   equil.gdata(idx).zdim, ...
    'zmaxis', equil.gdata(idx).zmaxis, ...
    'zmid',   equil.gdata(idx).zmid);

  gdata.time= equil.time(idx);
  gdata.tms=  equil.tms(idx);
  gdata.gdef.time= ['time in seconds; ', ...
       'Note: gtime,atime = ms in D3D,EAST,KSTAR but sec in NSTX (TRUTH)'];
  gdata.gdef.tms= ['time in ms; '];
  if exist('shot')
     gdata.shot= shot;
     gdata.gdef.shot= 'Shot number; used for mds call';
  end
  if exist('tms')
     gdata.tms_target= tms;
     gdata.gdef.tms_target= ...
      'Target time in ms; (.tms and .time are actual mds times found)';
  end
  if exist('tree')
     gdata.tree= tree;
     gdata.gdef.tree= 'tree; used for mds call';
  end
  if exist('server')
     gdata.server= server;
     gdata.gdef.server= 'server; used for mds call';
  end
  if exist('mds_string')
     gdata.mds_string= mds_string;
     gdata.gdef.mds_string= '1st input argument to equil_to_gdata';
  end
  
  ireadok= 1;
 else
  disp([' %ERROR equil_to_gdata, no gdata generated ']);
  gdata= [];
  ireadok= 0;
 end % ~isempty(equil)

  return
% ==========================================================
% testing
   gfile= '/u/leuer/efit/d3d/shot131498/g131498.02600'
   g0= read_gfile_func(gfile);

   mds_name='d3d.efit01.g131498.02600'; 
   [g1,ireadok] = equil_to_gdata(mds_name)
   [g2,ireadok] = read_gfile_func(mds_name)
 
   nms= char(fieldnames(g0));
   s= char(' '*ones(size(nms,1),1));
   [int2str((1:size(nms,1))') s nms]
   
   id= [2:12,14:15 17,19:26,28:30];
   for ii=id
    n= deblank(nms(ii,:))
    s= ['[g0.' n ' g1.' n ']'];
    eval(s)
    pause
   end
   
   contour(g0.pcurrt - g1.pcurrt)
   
   for ii=1:g0.nw
     [g0.pcurrt(:,ii) g1.pcurrt(:,ii)]
     pause
   end
   
   for ii=1:g0.nw
     [g0.psirz(:,ii) g1.psirz(:,ii)]
     pause
   end
   
   [g0.rbbbs(1:g0.nbbbs) g1.rbbbs(1:g1.nbbbs)]
  
% test read_gfile_func
   [g2,iok]= read_gfile_func(filename);
   [g3,iok]= read_gfile_func(gfilename);
   


