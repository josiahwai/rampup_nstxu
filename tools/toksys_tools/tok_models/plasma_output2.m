function output2_objs = ...
	plasma_output2(equil_data,rzrig_data,vacuum_objs,build_inputs)
 % ARE UNITS ON MPL AND GPB CORRECT??
 %
%  SYNTAX: output2_objs= ...
%	plasma_output2(equil_data,rzrig_data,vacuum_objs,build_inputs)
%
%  PURPOSE: Calculate DIII-D plasma response output equation objects for
%	rigid plasma.  Diagnostics are some or all of normal DIII-D diagnostics.
%	Run plasma_dynamics.m first to create the file plasma_objects.mat.
%
%  INPUT:
%    equil_data    = equilibrium data structure
%    rzrig_data    = data structure generated by rzrig
%    vacuum_objs   = data structure containing standard tokamak geometry objects
%    build_inputs  = (see plasma_dynamics)
%
%  OUTPUTS:
%    output2_objs: 
%	CXd = diagnostics flux, Br, Bz response due to plasma motion
%	    	from I_cond (=d[Psi, B ]pl/dIcond), Wb/A and T/A
%	CXp = diagnostics flux, Br, Bz response due to plasma current change
%	    	from I_cond (=d[Psi, B ]pl/dIcond), Wb/A and T/A
%	Gp = diagnostics flux, Br, Bz response due to plasma current (Ip) change
%	CRZmat = Plasma R, Z response to I_cond (m/A)
%	plasma_row = row vector to multiply by conductor currents to get Ip in
%		the case that Rp=0
%	dcrzdi', dcrzdi, ...
%	dcrzdip', dcrzdip, ...
%	dcrzdbetap', dcrzdbetap, ...
%	dcrzdli', dcrzdli, ...
%	CXbetap = diagnostics flux, Br, Bz response due to changes in betap
%               (=d[Psi, B ]pl/dbetap), Wb/? and T/?
%	CXli = diagnostics flux, Br, Bz response due to changes in li
%               (=d[Psi, B ]pl/dli), Wb/? and T/?

% 
%  RESTRICTIONS:
%  (1) Ip model only works for single filament
%  (2) Assumes all objects are in mks/terminal units.
 
%  METHOD:  
%
%  WRITTEN BY:  Mike Walker 	ON	10/24/97
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  @(#)plasma_output2.m	1.2 08/18/09

   struct_to_ws(build_inputs);
   rg = vacuum_objs.rg;
   zg = vacuum_objs.zg;
   rgg = vacuum_objs.rgg;
   zgg = vacuum_objs.zgg;
   nvv = vacuum_objs.nv;
   ncc = vacuum_objs.nc;

   irzresp = output_irzresp;

   shotstr = int2str(build_inputs.shotnum);
   timestr = int2str(build_inputs.time);
   out_file_name = ['out2_objs_' shotstr '_' timestr]

   out_log_file = [out_file_name '.log']
   fid_log = fopen(out_log_file,'a+');
   fprintf(fid_log,'\n');
   fprintf(fid_log,'Inputs to plasma_output2,  %s \n',date);
   fprintf(fid_log,'  num_Ecoils = %d\n',num_Ecoils);
   fprintf(fid_log,'  output_irzresp = %d\n',output_irzresp);
   fprintf(fid_log,'  out_log_file  =  %s\n', out_log_file);
   fclose(fid_log)

   plasma_out_common		% common code for all plasma_output routines

   mpl = vacuum_objs.mpl;
   gpb = vacuum_objs.gpb;
   CXd = [	zeros(20,ncurrents); 	% EA,EB, Fcoils
		mpl'*dcrzdi;		% flux loops: Wb/A
		gpb'*dcrzdi;		% Bprobes: T/A
		zeros(9,ncurrents)];	% 3 Rogowskis,E567up,dn,89dn,up,buss Vs

% Create plasma current change response: (Mean here assumes that all current
% carrying plasma grids have the same amount of current in them.)
%   if(length(idxpf)>1)
%      temp1 = mean(mpl(idxpf,:))'*1e-6;       	% flux loops: Wb/A
%      temp2 = mean(gpb(idxpf,:))'*1e-6;       	% Bprobes: T/A
%   else
      temp1 = mpl'*(cphi0(:)/sum(cphi0(:)));	% flux loops: Wb/A
      temp2 = gpb'*(cphi0(:)/sum(cphi0(:)));	% Bprobes: T/A
%   end

% contribution from BULK Ip current change ONLY
      Gp =  [	zeros(20,1);            	% EA,EB, Fcoils
		temp1;
		temp2;
		ones(3,1);			% 3 Rogowskis
		zeros(4,1);			% E567UP,E567DN,E89DN,E89UP
		zeros(2,1)];			% pcveplus, pcvvfi

% contribution from MOVEMENT of equilibrium current distribution ONLY
      CXp = [	zeros(20,1);            	% EA,EB, Fcoils
		mpl'*dcrzdip;
		gpb'*dcrzdip;
		zeros(3,1);			% 3 Rogowskis
		zeros(4,1);			% E567UP,E567DN,E89DN,E89UP
		zeros(2,1)];			% pcveplus, pcvvfi

if num_Ecoils==5 & EB_out 			% remove EB columns
   CXd  = CXd(:,[1 3:49]);
   CRZmat = CRZmat(:,[1 3:49]);
%   if Rp==0
%      CXp  = CXp(:,[1 3:49]);	% has only 1 column if Rp~=0
%   end
end

%if ~isempty(Rp) & Rp==0	% modified 9-4-98
if isempty(Rp) | Rp==0
   if ~exist('Xpd'), Xpd=zeros(size(Mpd));, end;
   if ~exist('Xpp'), Xpp=zeros(size(Lp));, end;

   CXp = CXp*(-(Mpd+Xpd)/(Lp+Xpp));
   Gp = Gp*(-(Mpd+Xpd)/(Lp+Xpp));
   plasma_row = -(Mpd+Xpd)/(Lp+Xpp);	% output row, can be appended to Cmat
else
   plasma_row=[];
end

   CXbetap = [ zeros(20,1);   	% EA,EB, Fcoils
   mpl'*dcrzdbetap;       	% flux loops: Wb/?
   gpb'*dcrzdbetap;       	% Bprobes: T/?
   zeros(9,1)];    		% 3 Rogowskis,E567up,dn,89dn,up,buss Vs
   CXli = [ zeros(20,1);   	% EA,EB, Fcoils
   mpl'*dcrzdli;       		% flux loops: Wb/?
   gpb'*dcrzdli; 	      	% Bprobes: T/?
   zeros(9,1)];    		% 3 Rogowskis,E567up,dn,89dn,up,buss Vs

descriptions = struct( ...
'CXd', 'diagnostics flux, Br, Bz response due to plasma motion from I_cond (=d[Psi, B ]pl/dIcond), Wb/A and T/A', ...
'CXp', 'diagnostics flux, Br, Bz response due to plasma current change from I_cond (=d[Psi, B ]pl/dIcond), Wb/A and T/A', ...
'Gp', 'diagnostics flux, Br, Bz response due to plasma current (Ip) change', ...
'CRZmat', 'Plasma R, Z response to I_cond (m/A)', ...
'plasma_row', 'row vector to multiply by conductor currents to get Ip in the case that Rp=0', ...
'dcrzdi',  '', ...
'dcrzdip',  '', ...
'dcrzdbetap',  '', ...
'dcrzdli', '', ...
'CXbetap', 'diagnostics flux, Br, Bz response due to changes in betap (=d[Psi, B ]pl/dbetap), Wb/unit-betap and T/unit-betap', ...
'CXli', 'diagnostics flux, Br, Bz response due to changes in li (=d[Psi, B ]pl/dli), Wb/unit-li and T/unit-li');

output2_objs = struct( ...
'CXd',CXd, ...
'CXp', CXp, ...
'Gp', Gp, ...
'CRZmat',CRZmat, ... 
'plasma_row', plasma_row, ...
'dcrzdi', dcrzdi, ...
'dcrzdip', dcrzdip, ...
'dcrzdbetap', dcrzdbetap, ...
'dcrzdli', dcrzdli, ...
'CXbetap', CXbetap, ...
'CXli',CXli, ...
'descriptions', descriptions);

save_str = [' output2_objs CXd CXp Gp CRZmat plasma_row ' ...
	' dcrzdi dcrzdip dcrzdbetap dcrzdli CXbetap CXli'];
eval(['save ' out_file_name save_str])

