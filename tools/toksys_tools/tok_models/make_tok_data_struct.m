function tok_data = make_tok_data_struct(datafiles,imks,iterminal)
 %
%  SYNTAX:  tok_data = make_tok_data_struct(datafiles,imks,iterminal)
%
%  PURPOSE:  Convert data contained in "environment" files into a standard
%	format tokamak data structure.
%
%  INPUT:
%    datafiles = string array (size nfiles by max name length) of *.mat 
%		files containing tokamak environment data
%    imks = if 1, input objects in datafiles are mks, else 0 (default=MA,uH)
%    iterminal = if 1, input objects are terminal units, else 0 (default)
%
%  OUTPUT:
%	tok_data = data structure constructed from this data. Contains:
%			- data objects
%			- units = units of data objects 
%			- description = descriptions of data objects 
  
%  RESTRICTIONS:
%
%  METHOD:  
%
%  WRITTEN BY:  Mike Walker 	ON 	12/10/04
%
%  VERSION @(#)make_tok_data_struct.m	1.13 01/15/15
%
%  MODIFICATIONS:
%     2007-03-19  jal   config_name
%     2008-01-21  NWE   appends rog & LV names, data, & LV mutuals to 
%                       tokamak structure
%     2009-05-12  ASW   Adding MSE
%     2009-10-27  ASW   Adding structure signals which contains names
%			for signals such as ptdata and pcs names.
%                       
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mpc = []; mcc=[]; rc=[]; % Get matlab to recognize these as variables

nfiles = size(datafiles,1);

if(nargin<2)
   imks=0;
end
if(nargin<3)
   iterminal=0;
end

for k=1:nfiles
   eval(['load ' datafiles(k,:)])
end

nc = size(mcc,1);
nv = size(mvv,1);

if(~exist('resc'))
   if(exist('rc'))
      resc = rc;
   else
      fprintf('ERROR - either resc or rc must exist\n')
   end
end
if(~exist('resv'))
   if(exist('rv'))
      resv = rv;
   else
      fprintf('ERROR - either resv or rv must exist\n')
   end
end

if(~exist('fldata'))
   if(exist('flzr'))
      fldata = flzr;
   else
      fprintf('ERROR - either fldata or flzr must exist\n')
   end
end
if(~exist('fcnames'))
   fcnames = char([]);
end

if(~exist('ccnames'))
   ccnames = char([]);
end

if(~exist('tdnames'))
   tdnames = char([]);
end

if(~exist('limdata'))
   limdata = [];
end

if(~exist('ecturn'))
   ecturn = [];
end
if(~exist('tdnturn'))
   tdnturn = [];
end
if(~exist('fcid'))
   fcid = [];
end
if(~exist('fcturn'))
   fcturn = [];
end
if(~exist('turnfc'))
   turnfc = [];
end
if(~exist('vvid'))
   vvid = [];
end
if(~exist('vvfrac'))
   vvfrac = [];
end
if(~exist('rldata'))
   rldata = [];
end
if(~exist('msedata'))
   msedata = [];
end
if(~exist('rlnames'))
   rlnames = [];
end
if(~exist('slnames'))
   slnames = [];
end
if(~exist('lvdata'))
   lvdata = [];
end
if(~exist('lvnames'))
   lvnames = [];
end
if exist('config_name')~=1
   config_name = [];
end
if(~exist('flsignals')) 
   flsignals = [];
end
if(~exist('bpsignals')) 
   bpsignals = [];
end
if(~exist('fcsignals')) 
   fcsignals = [];
end
if(~exist('ecsignals')) 
   ecsignals = [];
end
if(~exist('tdsignals')) 
   tdsignals = [];
end
if(~exist('rlsignals')) 
   rlsignals = [];
end
if(~exist('lvsignals')) 
   lvsignals = [];
end
if(~exist('slsignals')) 
   slsignals = [];
end

if exist('make_tok_inputs')~=1
   make_tok_inputs = [];
end

desc = struct( ...
'fcid','grouping IDs for fcoil circuits (not yet applied)', ...
'vvid','grouping IDs for vessel circuits (not yet applied)', ...
'ecturn','number of turns in each ecoil group (already applied)', ...
'fcturn','number of turns in each fcoil group or current fraction in group', ...
'turnfc','number of turns in each fcoil group or current fraction in group', ...
'vvfrac', 'fraction of grouped current flowing in individual vessel element');

def_connect = struct( ...
'fcid',fcid, ...
'vvid',vvid, ...
'ecturn', ecturn, ...
'fcturn', fcturn, ...
'turnfc', turnfc, ...
'vvfrac', vvfrac, ...
'descriptions', desc);

desc = struct( ...
'tokamak', 'name of machine, (ex: d3d, nstx, east, kstar)', ...
'config_name', 'specific machine build (ex: 04202005Av1.0 for nstx)', ...
'bpnames', 'names of B-probes', ...
'msenames', 'names of MSE channels that view points in msedata', ...
'flnames', 'names of flux loops', ...
'rlnames', 'names of Rogowski loops', ...
'lvnames', 'names of loop voltages', ...
'fcnames', 'names of F(shaping)-coils', ...
'ecnames', 'names of E(ohmic)-coils', ...
'ccnames', 'names of all coils [E;F]', ...
'vvnames', 'names of all vessel elements', ...
'tdnames', 'names of Three-Dimensional coils', ...
'slnames', 'names of saddle loops', ...
'flsignals', 'names of flux loop diagnostic data signals', ...
'bpsignals', 'names of B-probe diagnostic data signals', ...
'fcsignals', 'names of F-coil diagnostic data signals', ...
'ecsignals', 'names of E-coil diagnostic data signals', ...
'tdsignals', 'names of 3d coils diagnostic data signals', ...
'rlsignals', 'names of Rogowski loop diagnostic data signals', ...
'lvsignals', 'names of loop voltage diagnostic data signals', ...
'slsignals', 'names of saddle loop diagnostic data signals', ...
'bpdata', 'Bprobe data: [Z(m);R(m);Ang(deg);length(m);Ip coeff]', ...
'msedata', 'MSE measurement points: [Z(m);R(m);unused;unused;Phi(degrees)]', ...
'fldata','Flux loop Z,R geometry data [m]', ...
'rldata', 'Rogowski loop data (mask of conductors and plasma)',...
'lvdata', 'Loop voltage geometry data [Z(m),R(m)]', ...
'sldata', 'saddle loop geometry data (format?)', ...
'ecdata','E-coil individual turn data: Z(m),R(m),dZ(m),dR(m),??', ...
'fcdata', 'F-coil data: [Z(m);R(m);dZ(m);dR(m);AC(deg);AC2(deg)]', ...
'vvdata','vessel data: [Z(m);R(m);dZ(m);dR(m);AC(deg);AC2(deg)]', ...
'tddata', '3-D conductor data (format?)', ...
'limdata', 'vertical and radial positions [m] of vertices defining limiter', ...
'ecnturn', 'number of turns in each E-coil', ...
'fcnturn', 'number of turns in each F-coil', ...
'ccnturn', 'number of turns in all coils length(mcc)', ...
'tdnturn', 'number of turns in 3-D conductors', ...
'def_connect','default connections for current elements', ...
'gbc','Green funs from PF coils to Bprobes ', ...
'gbv','Green funs from vacuum vessel to Bprobes ', ...
'gbt','Green funs from 3-D conductors to Bprobes ', ...
'gpb','Green funs from plasma grid to Bprobes (transpose)', ...
'gmsebrc','Green funs from PF coils to Br at MSE points', ...
'gmsebzc','Green funs from PF coils to Bz at MSE points', ...
'gmsebrv','Green funs from vessel to Br at MSE points', ...
'gmsebzv','Green funs from vessel to Bz at MSE points', ...
'gmsebrt','Green funs from 3-D conductors to Br at MSE points', ...
'gmsebzt','Green funs from 3-D conductors to Bz at MSE points', ...
'gmsebrp','Green funs from plasma grid to Br at MSE points', ...
'gmsebzp','Green funs from plasma grid to Bz at MSE points', ...
'mcc', 'mutuals from coils to coils ', ...
'mcv', 'mutuals from coils to vessel', ...
'mvv', 'mutuals from vessel to vessel', ...
'mpc', 'mutuals from coils to plasma grid ', ...
'mpv', 'mutuals from plasma grid to vessel', ...
'gbr2c', 'greens functions from coils to Br on plasma grid', ...
'gbz2c', 'greens functions from coils to Bz on plasma grid', ...
'gbr2v', 'greens from vessel elements to Br on plasma grid', ...
'gbz2v', 'greens from vessel elements to Bz on plasma grid', ...
'gbr2p', 'Br greens from plasma grid to itself, compressed form', ...
'gbz2p', 'Bz greens from plasma grid to itself, compressed form', ...
'mlc', 'mutuals from coils to flux loops', ...
'mlv', 'mutuals from vessel to flux loops', ...
'mpl', 'mutuals from plasma to flux loops', ...
'mhc', 'mutuals from coils to loop voltages', ...
'mhv', 'mutuals from vessel to loop voltages', ...
'mph', 'mutuals from plasma to loop voltages', ...
'mpp', 'mutuals from plasma grid to itself, compressed form', ...
'mtt', 'mutuals between Three Dimensional elements', ...
'mct', 'mutuals between coils and Three Dimensional elements', ...
'mvt', 'mutuals between vessel and Three Dimensional elements', ...
'mpt', 'mutuals between plasma and Three Dimensional elements', ...
'mlt', 'mutuals between flux loops and Three Dimensional elements', ...
'mht', 'mutuals between voltage loops and Three Dimensional elements', ...
'mst', 'mutuals between saddle loops and Three Dimensional elements', ...
'msc', 'mutuals between saddle loops and coils',...
'nc', 'number of coils', ...
'nv', 'number of passive (vessel) elements', ...
'ntd', 'number of Three-Dimensional coils', ...
'nbp', 'number of B-probes', ... 
'nmse', 'number of MSE points', ... 
'nfl', 'number of flux loops', ...
'nrl', 'number of rogowski loops',...
'nlv', 'number of loop voltages', ...
'nsl', 'number of saddle loops', ...
'nr', 'number of plasma grid points in radial direction', ...
'nz', 'number of plasma grid points in radial direction', ...
'resc', 'resistances of coils', ...
'resv', 'resistances of passive (vessel) elements', ...
'rest', 'resistances of Three-Dimensional elements', ...
'rg', 'radial positions on grid [m] ', ...
'zg', 'vertical positions on grid [m] ', ...
'rgg', 'radial positions of grid points [m] ', ...
'zgg', 'vertical positions of grid points [m] ', ...
'imks', 'flag, 1 = units are MKS, 0 = units are MA,uH', ...
'iterminal', 'flag, 1 = units are terminal, 0 = units are lumped', ...
'make_tok_inputs', 'make_tok_objects input structure used to make objects');

units = make_units_struct(imks,iterminal);

tok_data = struct( ...
'tokamak',         tokamak, ...
'config_name',     config_name, ...
'bpnames', bpnames, ...
'msenames', msenames, ...
'flnames', flnames, ...
'rlnames', rlnames, ...
'lvnames', lvnames, ...
'fcnames', fcnames, ...
'ecnames', ecnames, ...
'ccnames', ccnames, ...
'vvnames', vvnames, ...
'tdnames', tdnames, ...
'slnames', slnames, ...
'flsignals', {flsignals}, ...
'bpsignals', {bpsignals}, ...
'fcsignals', {fcsignals}, ...
'ecsignals', {ecsignals}, ...
'tdsignals', {tdsignals}, ...
'rlsignals', {rlsignals}, ...
'lvsignals', {lvsignals}, ...
'slsignals', {slsignals}, ...
'bpdata',  bpdata, ...
'msedata',  msedata, ...
'fldata',  fldata, ...
'rldata',  rldata, ...
'lvdata',  lvdata, ...
'sldata',  {sldata}, ...
'ecdata',  ecdata, ...
'fcdata',  fcdata, ...
'tddata',  {tddata}, ...
'vvdata',  vvdata, ...
'limdata', limdata, ...
'ecnturn', ecnturn, ...
'fcnturn', fcnturn, ...
'ccnturn', ccnturn, ...
'tdnturn', tdnturn, ...
'def_connect', def_connect, ...
'gbc', gbc, ...
'gbv', gbv, ...
'gbt', gbt, ...
'gpb', gpb, ...
'gmsebrc', gmsebrc, ...
'gmsebzc', gmsebzc, ...
'gmsebrv', gmsebrv, ...
'gmsebzv', gmsebzv, ...
'gmsebrt', gmsebrt, ...
'gmsebzt', gmsebzt, ...
'gmsebrp', gmsebrp, ...
'gmsebzp', gmsebzp, ...
'mcc', mcc, ...
'mcv', mcv, ...
'mvv', mvv, ...
'mpc', mpc, ...
'mpv', mpv, ...
'mlc', mlc, ...
'mlv', mlv, ...
'mpl', mpl, ...
'mhc', mhc, ...
'mhv', mhv, ...
'mph', mph, ...
'mpp', mpp, ...
'mtt', mtt, ...
'mct', mct, ...
'mvt', mvt, ...
'mpt', mpt, ...
'mlt', mlt, ...
'mht', mht, ...
'mst', mst, ...
'msc', msc, ...
'gbr2c', gbr2c, ...
'gbz2c', gbz2c, ...
'gbr2v', gbr2v, ...
'gbz2v', gbz2v, ...
'gbr2p', gbr2p, ...
'gbz2p', gbz2p, ...
'nc', nc, ...
'nv', nv, ...
'nbp', nbp, ...
'nmse', nmse, ...
'nfl', nfl, ...
'nrl', nrl, ...
'nlv', nlv, ...
'nr', nr, ...
'nz', nz, ...
'resc', resc, ...
'resv', resv, ...
'rest', rest, ...
'rg', rg, ...
'zg', zg, ...
'rgg', rgg, ...
'zgg', zgg, ...
'imks', imks, ...
'iterminal', iterminal, ...
'units',units, ...
'descriptions',desc, ...
'make_tok_inputs', make_tok_inputs);

if(isempty(msedata))
   tok_data = rmfield(tok_data,'msedata');
   tok_data = rmfield(tok_data,'msenames');
   tok_data = rmfield(tok_data,'gmsebrc');
   tok_data = rmfield(tok_data,'gmsebzc');
   tok_data = rmfield(tok_data,'gmsebrv');
   tok_data = rmfield(tok_data,'gmsebzv');
   tok_data = rmfield(tok_data,'gmsebrp');
   tok_data = rmfield(tok_data,'gmsebzp');
   tok_data.descriptions = rmfield(tok_data.descriptions,'msedata');
   tok_data.descriptions = rmfield(tok_data.descriptions,'msenames');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gmsebrc');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gmsebzc');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gmsebrv');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gmsebzv');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gmsebrp');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gmsebzp');
end
if(isempty(ecdata))
   tok_data = rmfield(tok_data,'ecdata');
   tok_data.descriptions = rmfield(tok_data.descriptions,'ecdata');
   tok_data = rmfield(tok_data,'ecnames');
   tok_data.descriptions = rmfield(tok_data.descriptions,'ecnames');
   tok_data = rmfield(tok_data,'ecnturn');
   tok_data.descriptions = rmfield(tok_data.descriptions,'ecnturn');
end
if(isempty(lvdata))
   tok_data = rmfield(tok_data,'lvdata');
   tok_data.descriptions = rmfield(tok_data.descriptions,'lvdata');
   tok_data = rmfield(tok_data,'lvnames');
   tok_data.descriptions = rmfield(tok_data.descriptions,'lvnames');

   tok_data = rmfield(tok_data,'mhc');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mhc');
   tok_data = rmfield(tok_data,'mhv');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mhv');
   tok_data = rmfield(tok_data,'mph');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mph');
end
if(isempty(rldata))
   tok_data = rmfield(tok_data,'rldata');
   tok_data.descriptions = rmfield(tok_data.descriptions,'rldata');
   tok_data = rmfield(tok_data,'rlnames');
   tok_data.descriptions = rmfield(tok_data.descriptions,'rlnames');
end
if(isempty(sldata))
   tok_data = rmfield(tok_data,'sldata');
   tok_data.descriptions = rmfield(tok_data.descriptions,'sldata');
   tok_data = rmfield(tok_data,'slnames');
   tok_data.descriptions = rmfield(tok_data.descriptions,'slnames');
end
if(isempty(tddata))
   tok_data = rmfield(tok_data,'tddata');
   tok_data.descriptions = rmfield(tok_data.descriptions,'tddata');
   tok_data = rmfield(tok_data,'tdnames');
   tok_data.descriptions = rmfield(tok_data.descriptions,'tdnames');
   tok_data = rmfield(tok_data,'tdnturn');
   tok_data.descriptions = rmfield(tok_data.descriptions,'tdnturn');
   tok_data = rmfield(tok_data,'gbt');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gbt');
   tok_data = rmfield(tok_data,'gmsebrt');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gmsebrt');
   tok_data = rmfield(tok_data,'gmsebzt');
   tok_data.descriptions = rmfield(tok_data.descriptions,'gmsebzt');
   tok_data = rmfield(tok_data,'mtt');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mtt');
   tok_data = rmfield(tok_data,'mct');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mct');
   tok_data = rmfield(tok_data,'mvt');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mvt');
   tok_data = rmfield(tok_data,'mpt');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mpt');
   tok_data = rmfield(tok_data,'mlt');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mlt');
   tok_data = rmfield(tok_data,'mht');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mht');
   tok_data = rmfield(tok_data,'mst');
   tok_data.descriptions = rmfield(tok_data.descriptions,'mst');
   tok_data = rmfield(tok_data,'msc');
   tok_data.descriptions = rmfield(tok_data.descriptions,'msc');
   tok_data = rmfield(tok_data,'rest');
   tok_data.descriptions = rmfield(tok_data.descriptions,'rest');
end
if(isempty(config_name))
   tok_data = rmfield(tok_data,'config_name');
   tok_data.descriptions = rmfield(tok_data.descriptions,'config_name');
end
if(isempty(flsignals))
   tok_data = rmfield(tok_data,'flsignals');
   tok_data.descriptions = rmfield(tok_data.descriptions,'flsignals');
end
if(isempty(bpsignals))
   tok_data = rmfield(tok_data,'bpsignals');
   tok_data.descriptions = rmfield(tok_data.descriptions,'bpsignals');
end
if(isempty(fcsignals))
   tok_data = rmfield(tok_data,'fcsignals');
   tok_data.descriptions = rmfield(tok_data.descriptions,'fcsignals');
end
if(isempty(ecsignals))
   tok_data = rmfield(tok_data,'ecsignals');
   tok_data.descriptions = rmfield(tok_data.descriptions,'ecsignals');
end
if(isempty(tdsignals))
   tok_data = rmfield(tok_data,'tdsignals');
   tok_data.descriptions = rmfield(tok_data.descriptions,'tdsignals');
end
if(isempty(rlsignals))
   tok_data = rmfield(tok_data,'rlsignals');
   tok_data.descriptions = rmfield(tok_data.descriptions,'rlsignals');
end
if(isempty(lvsignals))
   tok_data = rmfield(tok_data,'lvsignals');
   tok_data.descriptions = rmfield(tok_data.descriptions,'lvsignals');
end
if(isempty(slsignals))
   tok_data = rmfield(tok_data,'slsignals');
   tok_data.descriptions = rmfield(tok_data.descriptions,'slsignals');
end
if(isempty(vvnames))
   tok_data = rmfield(tok_data,'vvnames');
   tok_data.descriptions = rmfield(tok_data.descriptions,'vvnames');
end
