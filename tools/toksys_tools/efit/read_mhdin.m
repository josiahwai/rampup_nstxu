 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  USAGE:  >>read_mhdin
%
%  PURPOSE: reads efit file mhdin.dat. All variables are added in UPPER CASE
%
%  INPUTS: [default]
%     filename = ['mhdin.dat']; % EFIT mhdin.dat file name Can contain directory
%
%   Note: below dimensions are needed only if geometry is read below namelist
%         defaults for D3D   
%
%     nfcoil = [18]; % # of F-coils; must be specified for non-D3D (Opt.)
%                        defaults to D3D values of nfcoil=18
%     necoil = [122];% # number of E-coils elements specify for non-D3D (Opt.)
%                        defaults to D3D value of nesum=6
%     nsilop = [41]; % # flux loops, needed if not read in namelist (opt.)
%     nvesel = [24]; % # vessels, needed if not read in namelist (opt.)
%
%  OUTPUTS:
%    all name list items: IGRID, RLEFT, RRIGHT, ... FCID, FCTURN, ...
%    PF coil geometry if nfcoil>0,
%    E-coil geometry if nesum>0
%    ireadok = flag to report good read of gfile (0=bad, 1=good)
% 
%  CAUTION: Namelist is read with to_upper=+1 which makes all variables UPPER
%           CASE.
%           New read_namelist in /thor/leuer/matlab/util/read_namelist.m 
%           allows change of case. We want to read and make all variables UC
%
%  To change UPPER CASE to lower case use:
%  mhdin_list= mk_uc_lc_var; % makes all lower case variables (nothing to UPCASE)
%  mhdin_list= mk_uc_lc_var('-remove_upper','*'); % remove upper case

% Generated by Jim Leuer 03/25/2004     
% taken from frotran of efund.for 
% updated to all UPPER CASE 6/2/2004
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Prelims:

% if exist('nfcoil')~=1,   nfcoil=18,  end  %default to D3D values...
% if exist('necoil')~=1,   necoil=122, end
% if exist('nsilop')~=1,   nsilop=41,  end
% if exist('nvesel')~=1,   nvesel=24,  end

 to_upper= +1; % this is now default read into all UPPER CASE

% -------------------------- Open File: filename

   if exist('filename')~=1
      filename= 'mhdin.dat'
   end
   
   if ~isstr(filename)
      disp([' %ERROR Filename must be a string ',filename]);
      ireadok= 0;
      return
   end

   if exist(filename)~=2
      disp([' %ERROR Filename doesnt exist ',filename]);
      ireadok= 0;
      return
   end

   fid= fopen(filename, 'r');

   if fid == (-1)
      disp([' %ERROR read_mhdin: Couldn''t open file ',filename]);
      ireadok= 0;
      return
   end

   ireadok= 1;
   fclose(fid);
 
% =============================================================
% Start 
 read_namelist; % new version works for most namelist types

% NOT USED SINCE TOUPPER in read_namelist CONTROLS CASE
% Convert all upper case to lower case
%  disp('% NOTE: We are making lower case variables out of ALL UPPER CASE')
%  disp('% NOTE: We are REMOVING ALL UPPER CASE VARIABLES')
  
%  mhdin_list= mk_uc_lc_var; % makes all lower case variables (nothing to UPCASE)
%  mhdin_list= mk_uc_lc_var('-remove_upper','*'); % remove upper case

%
% =============================================================
% Now start reading data at end of namelist
 
%      if (rf(1).lt.0.0)
%     .read (nin,10000) (rf(i),zf(i),wf(i),hf(i),af(i),af2(i),
%     .                  i=1,nfcoil)
% 10000 format (6e12.6)


% open filename and find end of namelist
  fid= fopen(filename, 'r');


% find start of namelist
   nlcnt = 0;
   line1 = fgets(fid);
   totstr = '';
   if(~isempty(findstr(line1,'$')) | ~isempty(findstr(line1,'&')))
%      fprintf('Begin processing %s\n',line1)
      nlcnt = nlcnt+1;
      temp = deblank(line1);
      if(size(nlnames,2)~=0)
         if(length(temp)>size(nlnames,2))
            bb = blanks(length(temp)-size(nlnames,2));
            nlnames = [nlnames bb*ones(size(nlnames,1))];
         end
      end
      nlnames(nlcnt,1:length(temp)) = temp;
      while line1~=-1
         line1 = fgets(fid);

% find end of namelist
         idx = union(findstr(line1,'$'),findstr(line1,'&'));
         if(~isempty(idx))
           break
         end;
         if(length(line1)>1 & strcmp(line1(2),'/'))
           break
         end;
      end
   end

  if isempty(findstr(upper(nlnames(1,:)),'IN3'))
    disp('%WARNING: couldnt find namelist IN3 in the input file')
  end 
  
% ===========================
% Read F-coil
% ===========================
% next lines should be F-coil
%      if (rf(1).lt.0.0)
%     .read (nin,10000) (rf(i),zf(i),wf(i),hf(i),af(i),af2(i),
%     .                  i=1,nfcoil)
% 10000 format (6e12.6)

   disp('% Looking after namelist for other data: F-coil, Flux, B-probe, E, VV')

% see if these were written in name list and make all dummy variables not read
  if exist('RF')==1 & exist('HF')==1
    if exist('WF')~=1
       WF= zeros(size(RF));
    end
    if exist('HF')~=1
       HF= zeros(size(RF));
    end
    if exist('AF')~=1
       AF= zeros(size(RF));
    end
    if exist('AF2')~=1
       AF2= zeros(size(RF));
    end
  end
      
  if exist('RF')~=1 RF= -1; end
  if RF(1) < 0.0
   disp(['% reading ',int2str(nfcoil),' PF coils: rf,zf,wf,hf,af,af2'])
   clear RF ZF
   RF=  zeros(nfcoil,1);
   ZF=  RF;
   HF=  RF;
   AF=  RF;
   AF2= RF;
   for ii=1:nfcoil
      str= fgetl(fid);
      dum= sscanf(str,'%f');
      len= length(dum);
      RF(ii,1)= dum(1);
      ZF(ii,1)= dum(2);
      if len>=3 WF(ii,1)=  dum(3); end
      if len>=4 HF(ii,1)=  dum(4); end
      if len>=5 AF(ii,1)=  dum(5); end
      if len>=6 AF2(ii,1)= dum(6); end
   end % do      
   disp('F-COIL RF,ZF,WF,HF,AF,AF2')
   disp([RF,ZF,WF,HF,AF,AF2])
  end

% ===========================
% Read Flux Loops
% ===========================
%      if (rsi(1).lt.0.0)
%     .read (nin,10000) (rsi(i),zsi(i),wsi(i),hsi(i),as(i),as2(i),
%     .              i=1,nsilop)

% see if UC was read in namelist
  if exist('RSI')==1 & exist('ZSI')==1
    if exist('WSI')~=1
       WSI= zeros(size(RSI));
    end
    if exist('HSI')~=1
       HSI= zeros(size(RSI));
    end
    if exist('AS')~=1
       AS= zeros(size(RSI));
    end
    if exist('AS2')~=1
       AS2= zeros(size(RSI));
    end
    if exist('LPNAME')~=1
       LPNAME= int2str((1:length(RSI))');
    end
  end
      
  if exist('RSI')~=1 RSI(1)=-1; end
  if RSI(1) < 0.0
   disp(['% reading ',int2str(nsilop),' flux loops: rsi,zsi,wsi,hsi,as,as2'])
   clear RSI ZSI
   RSI=  zeros(nsilop,1);
   ZSI=  RSI;
   WSI=  RSI;
   HSI=  RSI;
   AS=   RSI;
   AS2=  RSI;
   for ii=1:nsilop
      str= fgetl(fid);
      dum= sscanf(str,'%f');
      len= length(dum);
      RSI(ii,1)= dum(1);
      ZSI(ii,1)= dum(2);
      if len>=3 WSI(ii,1)=  dum(3); end
      if len>=4 HSI(ii,1)=  dum(4); end
      if len>=5 AS(ii,1)=   dum(5); end
      if len>=6 AS2(ii,1)=  dum(6); end
   end % do      
   disp('flux loops: RSI,ZSI,WSI,HSI,AS,AS2')
   disp([RSI,ZSI,WSI,HSI,AS,AS2])
  end


% ===========================
% Read Ecoil & Vessel
% ===========================
%      if ((iecoil.gt.0).or.(ivesel.gt.0)) then
%        if (re(1).lt.0.0)
%       .read (nin,10020) (re(i),ze(i),we(i),he(i),ecid(i),i=1,necoil)

%       if (ivesel.gt.0.and.rvs(1).lt.0.0) then
%        if (wvs(1).lt.0.0) then
%          read (nin,10000) (rvs(i),zvs(i),wvs(i),hvs(i),avs(i),avs2(i),
%        .              i=1,nvesel)
%        else
%          do i=1,nvesel
%           read (nin,*) rvs(i),zvs(i)
%          enddo
%        endif
%       endif
%      endif

  if exist('IECOIL')~=1 IECOIL= 0; end

  if IECOIL>=1
     if exist('RE')~=1 RE= -1; end % must read in ecoil
     if RE(1) < 0
       disp(['% Reading ',int2str(necoil),' Ecoil: re ze we he ecid'])
       clear RE ZE
       WE= zeros(necoil,1);
       HE= WE;
       ECID= (1:length(necoil))';
       for ii=1:necoil
         str= fgetl(fid);
         dum= sscanf(str,'%f');
	 len= length(dum);
         RE(ii,1)= dum(1);
         ZE(ii,1)= dum(2);
         if len>=3 WE(ii,1)=    dum(3); end
         if len>=4 HE(ii,1)=    dum(4); end
         if len>=5 ECID(ii,1)=  dum(5); end
      end % end do
      disp('Ecoil: RE, ZE, WE, HE, ECID')
      disp([RE, ZE, WE, HE, ECID])
    end      
  end

  if exist('IVESEL')~=1 IVESEL= 0; end

  if IVESEL>=1
     if exist('RVS')~=1
        RVS= -1; % must read in vessel
	WVS= -1; % parallogram 
     end
     if RVS(1) < 0
       disp(['% Reading ',int2str(nvesel),' Vessels: rvs zvs wvs hvs avs avs2'])
       clear RVS ZVS
       WVS=  zeros(nvesel,1);
       HVS=  WVS;
       AVS=  WVS;
       AVS2= WVS;
       for ii=1:nvesel
         str= fgetl(fid);
         dum= sscanf(str,'%f');
         len= length(dum);
         RVS(ii,1)= dum(1);
         ZVS(ii,1)= dum(2);
         if len>=3 WVS(ii,1)=  dum(3); end
         if len>=4 HVS(ii,1)=  dum(4); end
         if len>=5 AVS(ii,1)=  dum(5); end
         if len>=6 AVS2(ii,1)= dum(6); end
      end % end do
      disp('Vessels: RVS,ZVS,WVS,HVS,AVS,AVS2')
      disp([RVS,ZVS,WVS,HVS,AVS,AVS2])
    end      
  end

% ========================================================
% Do Some ERROR Checking
  if exist('RSI')~=1
    disp('% ERROR: No Flux loops in mhdin.dat file')
  end 
  if exist('XMP2')~=1
    disp('% ERROR: No Bprobes in mhdin.dat file')
  end 
  if exist('RF')~=1
    disp('% ERROR: No PF Coils in mhdin.dat file')
  end 

% ========================================================   
% Do some Plotting:
  if exist('RF') & exist('AF2')
    plot_box(RF,ZF,WF,HF,'r',AF,AF2)
    hold on
  end
  if exist('RE') & exist('HE')
    plot_box(RE,ZE,WE,HE,'k')
    hold on
  end
  if exist('RVS') & exist('AVS')
    plot_box(RVS,ZVS,WVS,HVS,'r',AVS,AVS2)
    hold on
  end
  if exist('RSI') & exist('ZSI')
    plot(RSI,ZSI,'xb')
    hold on
  end
  if exist('XMP2') & exist('YMP2')
    plot(XMP2,YMP2,'og')
    hold on
  end
  if exist('RLEFT') & exist('ZBOTTO')
    plot([RLEFT RRIGHT RRIGHT RLEFT RLEFT],[ZBOTTO ZBOTTO ZTOP ZTOP ZBOTTO],'k')
    hold on
  end
  axis image
  grid
  title([fix_undscr(filename)])
  ylabel('R')
  xlabel('Z')
  
 return
% ========================================================

% ========================================================
% NOW generate some zero arrays if they dont exist      
 if exist('RSI')~=1
  if exist('HSI')~=1 HSI= zeros(size(RSI)); end
  if exist('WSI')~=1 WSI= zeros(size(RSI)); end
  if exist('AS')~=1  AS= zeros(size(RSI));  end
  if exist('AS2')~=1 AS2= zeros(size(RSI)); end
  if exist('HSI')~=1 HSI= zeros(size(RSI)); end
 end
 
 if exist('XMP2')~=1 XMP2= zeros(nbprobe,1); end
  if exist('AMP2')~=1 AMP2= zeros(size(XMP2)); end
  if exist('SMP2')~=1 SMP2= zeros(size(XMP2)); end
  if exist('MPNAM2')~=1 MPNAM2= int2str((1:length(XMP2))'); end
  if exist('PATMP2')~=1 PATMP2= zeros(size(XMP2)); end
  if exist('MPNAM2')~=1 MPNAM2= int2str((1:length(XMP2))'); end

% Probably will need to add more default arrays here
    
 return
 
% =====================================================================
% testing:
% tested for east ok
% Not tested for any other mhdin.dat but should be reasonable   
  filename='/u/leuer/efit/east/green/run/ef20040325.est'
  nfcoil=14
  read_mhdin




 
