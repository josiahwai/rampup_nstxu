%  USAGE:   gs_eq_analysis
%
%  PURPOSE: Find magnetic axis and boundary, calculate the plasma currents on the grid
%           Find the total flux from plasma and from external conductors
%
%  INPUTS: several variables generated by gs_initialize are needed
%
%  OUTPUTS: Some of the quantities are:
%           rmaxis, zmaxis, psimag, position of axis and its flux
%           rbdef, zbdef, psibry, boundary-defining point (x or touch) and its flux
%           rx1, zx1, psix1, position and flux of most important x-point below axis
%           rx2, zx2, psix2, position and flux of most important x-point below axis
%           rtl, ztl, psitl, position and flux of most important limiter-point
%           rbbbs, zbbbs, nbbbs, nbbbs boundary positions
%           pcurrt, current within grid cells (A)
%           Acell, RAcell, ARcell, amount of plasma-coverage in grid cells at boundary
%           psizr_pla, psizr_app, flux from plasma and from conductors
%           psizr_err = psizr-psizr_pla-psizr_app
%           cpasma = sum(pcurrt(:)), total plasma current
%           psipla, plasma flux
%           Vtot, total plasma volume
%           Wth, total thermal energy
%           betap, poloidal beta
%           li, normalized inductance

%	
%  METHOD: 
	
%  NOTES:  
	
%
%  WRITTEN BY:  Anders Welander  ON	4/2/13
%
%  MODIFICATION HISTORY:				
%	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

psizr_app = reshape(mpc*ic+mpv*iv,nz,nr);

if plasma
  gs_field_topology
  if lim == 0
    if zbdef < zmaxis
      shape = 'LN';
    else
      shape = 'UN';
    end
  else
    shape = 'LIM';
  end  
else
  psizr = psizr_app;
  gs_nulls
  bdefs.count = 0;
  shape = 'VAC';
  fpolzr = rzero*bzero+zeros(nz,nr);
  pcurrt = zeros(nz,nr);
  Acell = zeros(nz,nr);
  if ~isnan(rmaxis) & ~isnan(zmaxis) & rmaxis > 0
    kr0 = min(nr-3,max(1,floor((rmaxis-rg(1))/dr)));
    kz1 = min(nz-2,max(2,ceil((zmaxis-zg(1))/dz)));
    k = kr0*nz+kz1;
    iia = k+neighbors';
    tr = (rmaxis-rgg(k))/dr;
    tz = (zmaxis-zgg(k))/dz;
    wa = reshape(([1 tz tz^2 tz^3]*mx)'*[1 tr tr^2 tr^3]*mx,1,16);
  end
end
psimag = wa*psizr(iia);
psibry = wb*psizr(iib);
gs_trace_edge
gs_cell_coverage
psibarzr = (psizr-psimag)/(psibry-psimag); % Now using new psimag, psibry
iknot = ones(nz,nr);
for i = 2:nkn
  iknot(psibarzr > psikn(i)) = i;
end
iknot(~iplasma) = nkn+1;

% Coefficients for the nkn third degree polynomials for pres
p0 = c0*sp;
p1 = c1*sp;
p2 = c2*sp;
p3 = c3*sp;

% Coefficients for the nkn third degree polynomials for fpol^2/2-fpol(nr)^2/2
f0 = c0*sf;
f1 = c1*sf;
f2 = c2*sf;
f3 = c3*sf;

pres = p0(iknotg) + ...
       p1(iknotg).*psibar + ...
       p2(iknotg).*psibar.^2 + ...
       p3(iknotg).*psibar.^3;
pres(nr) = 0;

pprime = (p1(iknotg) + ...
          p2(iknotg)*2.*psibar + ...
	  p3(iknotg)*3.*psibar.^2)*twopi/(psibry-psimag);

halffpolsquared = f0(iknotg) + ...
                  f1(iknotg).*psibar + ...
		  f2(iknotg).*psibar.^2+...
                  f3(iknotg).*psibar.^3 + ...
		  rzero^2*bzero^2/2;

halffpolsquared(halffpolsquared < 0) = 0;

fpol = sign(rzero*bzero)*sqrt(2*halffpolsquared);

ffprim = (f1(iknotg) + ...
          f2(iknotg)*2.*psibar + ...
	  f3(iknotg)*3.*psibar.^2)*twopi/(psibry-psimag);

if 0 
  rhc = linspace(0,1,nr)'; % radii where flux is psih values
  psih = psibar.^2;
  d2psih = psih(3:nr)+psih(1:nr-2)-2*psih(2:nr-1);
  jh = interp1(psibar,ffprim/mu0/rbdef+rbdef*pprime,psih);
  Icircle = [0; cumsum(psibar(2:nr).*(jh(2:nr)+jh(1:nr-1)))];
end


fpolzr = sign(rzero*bzero)*sqrt(2*(...
         f0(iknot) + ...
         f1(iknot).*psibarzr + ...
	 f2(iknot).*psibarzr.^2 + ...
	 f3(iknot).*psibarzr.^3 + ...
	 rzero^2*bzero^2/2));

preszr = p0(iknot) + ...
         p1(iknot).*psibarzr + ...
	 p2(iknot).*psibarzr.^2 + ...
	 p3(iknot).*psibarzr.^3;

pprimezr = (p1(iknot) + ...
            p2(iknot)*2.*psibarzr + ...
	    p3(iknot)*3.*psibarzr.^2)*twopi/(psibry-psimag);

ffprimzr = (f1(iknot) + ...
            f2(iknot)*2.*psibarzr + ...
	    f3(iknot)*3.*psibarzr.^2)*twopi/(psibry-psimag);

pcurrt = RA.*pprimezr+AR.*ffprimzr/mu0; % Toroidal current
psitor = iplasma.*AR.*fpolzr; % Toroidal flux *in the plasma*

for i = 1:ngg
  if ncell(i) > 0
    if iplasma(i)
      pcurrt(i) = pcurrt(i) + ...
                  (RAcell(i)-RA(i))*pprime(nr) + ...
                  (ARcell(i)-AR(i))*ffprim(nr)/mu0;
      psitor(i) = psitor(i) + (ARcell(i)-AR(i))*fpol(nr);
    else
      pcurrt(i) = RAcell(i)*pprime(nr)+ARcell(i)*ffprim(nr)/mu0;
      psitor(i) = ARcell(i)*fpol(nr);
    end
  end
end


% Various quantities
psizr_r = [zeros(nz,1) psizr(:,3:end)-psizr(:,1:end-2) zeros(nz,1)]/2/dr;
psizr_z = [zeros(1,nr);psizr(3:end,:)-psizr(1:end-2,:);zeros(1,nr)]/2/dz;
Babszr = sqrt((psizr_r./rgg/twopi).^2 + (psizr_z./rgg/twopi).^2 + (fpolzr./rgg).^2);
Bp2zr = (psizr_r.^2+psizr_z.^2)/twopi^2./rgg.^2;
if plasma
  % Find where boundary is at maximum radius
  [rbbbso, i] = max(rbbbs(1:nbbbs));
  zbbbso = zbbbs(i);
  for i = 1:4
    % Solve the equations:
    % pz + prz*x + pzz*y = 0
    % p + pr*x + pz*y = psibry
    % for x and y, and repeat a few times to zoom in on max r of boundary
    iz = (zbbbso-zg(1))/dz+1;
    jr = (rbbbso-rg(1))/dr+1;
    kz = floor(iz);
    kr = floor(jr);
    tz = iz-kz;
    tr = jr-kr;
    wz0 = [1 tz tz^2 tz^3]*mx;
    wz1 = [0 1 2*tz 3*tz^2]*mx/dz;
    wz2 = [0 0 2 6*tz]*mx/dz^2;
    wr0 = [1 tr tr^2 tr^3]*mx;
    wr1 = [0 1 2*tr 3*tr^2]*mx/dr;
    wr2 = [0 0 2 6*tr]*mx/dr^2;
    iio = kz+nz*(kr-1)+neighbors';
    wo = reshape(wz0'*wr0,1,16);
    wor = reshape(wz0'*wr1,1,16);
    woz = reshape(wz1'*wr0,1,16);
    worz = reshape(wz1'*wr1,1,16);
    wozz = reshape(wz2'*wr0,1,16);
    p = wo*psizr(iio);
    pr = wor*psizr(iio);
    pz = woz*psizr(iio);
    prz = worz*psizr(iio);
    pzz = wozz*psizr(iio);
    xy = inv([prz pzz; pr pz])*[-pz;psibry-p];
    xy = xy*min(1,0.5/max(abs(xy(1)/dr),abs(xy(2)/dz)));
    rbbbso = rbbbso+xy(1);
    zbbbso = zbbbso+xy(2);
  end
  % Find where boundary is at maximum height
  [zbbbsu, i] = max(zbbbs(1:nbbbs));
  rbbbsu = rbbbs(i);
  for i = 1:4
    % Solve the equations:
    % pr + prr*x + prz*y = 0
    % p + pr*x + pz*y = psibry
    % for x and y, and repeat a few times to zoom in on max z of boundary
    iz = (zbbbsu-zg(1))/dz+1;
    jr = (rbbbsu-rg(1))/dr+1;
    kz = floor(iz);
    kr = floor(jr);
    tz = iz-kz;
    tr = jr-kr;
    wz0 = [1 tz tz^2 tz^3]*mx;
    wz1 = [0 1 2*tz 3*tz^2]*mx/dz;
    wz2 = [0 0 2 6*tz]*mx/dz^2;
    wr0 = [1 tr tr^2 tr^3]*mx;
    wr1 = [0 1 2*tr 3*tr^2]*mx/dr;
    wr2 = [0 0 2 6*tr]*mx/dr^2;
    iiu = kz+nz*(kr-1)+neighbors';
    wu = reshape(wz0'*wr0,1,16);
    wur = reshape(wz0'*wr1,1,16);
    wuz = reshape(wz1'*wr0,1,16);
    wurr = reshape(wz0'*wr2,1,16);
    wurz = reshape(wz1'*wr1,1,16);
    p = wu*psizr(iiu);
    pr = wur*psizr(iiu);
    pz = wuz*psizr(iiu);
    prr = wurr*psizr(iiu);
    prz = wurz*psizr(iiu);
    xy = inv([prr prz; pr pz])*[-pr;psibry-p];
    xy = xy*min(1,0.5/max(abs(xy(1)/dr),abs(xy(2)/dz)));
    rbbbsu = rbbbsu+xy(1);
    zbbbsu = zbbbsu+xy(2);
  end
  % Find where boundary is at minimum radius
  [rbbbsi, i] = min(rbbbs(1:nbbbs));
  zbbbsi = zbbbs(i);
  for i = 1:4
    % Solve the equations:
    % pz + prz*x + pzz*y = 0
    % p + pr*x + pz*y = psibry
    % for x and y, and repeat a few times to zoom in on min r of boundary
    iz = (zbbbsi-zg(1))/dz+1;
    jr = (rbbbsi-rg(1))/dr+1;
    kz = floor(iz);
    kr = floor(jr);
    tz = iz-kz;
    tr = jr-kr;
    wz0 = [1 tz tz^2 tz^3]*mx;
    wz1 = [0 1 2*tz 3*tz^2]*mx/dz;
    wz2 = [0 0 2 6*tz]*mx/dz^2;
    wr0 = [1 tr tr^2 tr^3]*mx;
    wr1 = [0 1 2*tr 3*tr^2]*mx/dr;
    wr2 = [0 0 2 6*tr]*mx/dr^2;
    iii = kz+nz*(kr-1)+neighbors';
    wi = reshape(wz0'*wr0,1,16);
    wir = reshape(wz0'*wr1,1,16);
    wiz = reshape(wz1'*wr0,1,16);
    wirz = reshape(wz1'*wr1,1,16);
    wizz = reshape(wz2'*wr0,1,16);
    p = wi*psizr(iii);
    pr = wir*psizr(iii);
    pz = wiz*psizr(iii);
    prz = wirz*psizr(iii);
    pzz = wizz*psizr(iii);
    xy = inv([prz pzz; pr pz])*[-pz;psibry-p];
    xy = xy*min(1,0.5/max(abs(xy(1)/dr),abs(xy(2)/dz)));
    rbbbsi = rbbbsi+xy(1);
    zbbbsi = zbbbsi+xy(2);
  end
  % Find where boundary is at minimum height
  [zbbbsd, i] = min(zbbbs(1:nbbbs));
  rbbbsd = rbbbs(i);
  for i = 1:4
    % Solve the equations:
    % pr + prr*x + prz*y = 0
    % p + pr*x + pz*y = psibry
    % for x and y, and repeat a few times to zoom in on min z of boundary
    iz = (zbbbsd-zg(1))/dz+1;
    jr = (rbbbsd-rg(1))/dr+1;
    kz = floor(iz);
    kr = floor(jr);
    tz = iz-kz;
    tr = jr-kr;
    wz0 = [1 tz tz^2 tz^3]*mx;
    wz1 = [0 1 2*tz 3*tz^2]*mx/dz;
    wz2 = [0 0 2 6*tz]*mx/dz^2;
    wr0 = [1 tr tr^2 tr^3]*mx;
    wr1 = [0 1 2*tr 3*tr^2]*mx/dr;
    wr2 = [0 0 2 6*tr]*mx/dr^2;
    iid = kz+nz*(kr-1)+neighbors';
    wd = reshape(wz0'*wr0,1,16);
    wdr = reshape(wz0'*wr1,1,16);
    wdz = reshape(wz1'*wr0,1,16);
    wdrr = reshape(wz0'*wr2,1,16);
    wdrz = reshape(wz1'*wr1,1,16);
    p = wd*psizr(iid);
    pr = wdr*psizr(iid);
    pz = wdz*psizr(iid);
    prr = wdrr*psizr(iid);
    prz = wdrz*psizr(iid);
    xy = inv([prr prz; pr pz])*[-pr;psibry-p];
    xy = xy*min(1,0.5/max(abs(xy(1)/dr),abs(xy(2)/dz)));
    rbbbsd = rbbbsd+xy(1);
    zbbbsd = zbbbsd+xy(2);
  end
  cpasma = sum(pcurrt(:));
  volumezr = 2*pi*RAcell; % Here RAcell is the best choice, not RA
  Wzr = 3*pi*RA.*preszr; % RA is the best choice here, not RAcell
  Wth = sum(Wzr(:));
  torflux = sum(psitor(:));
  DX = diff(rbbbs)';
  DY = diff(zbbbs)';
  cpieces = sqrt(DX.^2+DY.^2);
  rsurf = (rbbbsi+rbbbso)/2;
  zsurf = (zbbbsd+zbbbsu)/2;
  btsurf = abs(fpol(end)/rsurf);
  aminor = (rbbbso-rbbbsi)/2;
  bminor = (zbbbsu-zbbbsd)/2;
  elongb = bminor/aminor;
  Ltot = sum(ARcell(:));
  Atot = sum(Acell(:));
  Vtot = sum(volumezr(:));
  Cl = sum(cpieces(1:nbbbs-1)); % Contour length
  Bp2V = sum(sum(volumezr.*Bp2zr));      
  rcur = rgg(:)'*pcurrt(:)/cpasma;
  zcur = zgg(:)'*pcurrt(:)/cpasma;
  bp2flx = (mu0*cpasma/Cl)^2;
  psipla = psizr(:)'*pcurrt(:)/cpasma;
  psiplaapp = psizr_app(:)'*pcurrt(:)/cpasma;
  betap = 4/3*mu0*Wth/Vtot/bp2flx;
  ip_normalized = abs(cpasma/1e6/aminor/btsurf);
  betat = 400/3*Wth/Vtot/btsurf^2*mu0;
  betan = betat/ip_normalized;
  li = Bp2V/Vtot/bp2flx; % Volume-averaged Bp^2 / bp2flx
  if li < 0.1
    li = 0.1;
  elseif li > 10
    li = 10;
  end
else % No plasma
  cpasma = 0;
  Wth = 0;
  torflux = 0;
  rsurf = rzero;
  aminor = 0;
  bminor = 0;
  Ltot = 0;
  Atot = 0;
  Vtot = 0;
  elongb = 1;
  rcur = nan;
  zcur = nan;
  rbdef = nan;
  zbdef = nan;
  bp2flx = 0;
  psipla = psimag;
  psiplaapp = psimag;
  betap = 0;
  betat = 0;
  betan = 0;
  li = 1;
end
plasma_is_tiny = aminor < dr;

% FLUX ERROR
if halo
  gs_halo
  psizr_halo = reshape(dpsizrpladpcurrt*ihzr(:),nz,nr);  
else
  psizr_halo = zeros(nz,nr);
end
if plasma
  psizr_pla = reshape(dpsizrpladpcurrt*pcurrt(:),nz,nr);  
  iused = iplasma(:) | ncell(:) > 0;
  iused(iib) = 1;
  iused(iia) = 1;
else
  psizr = psizr_app;
  psizr_pla = zeros(nz,nr);
  iused = ones(ngg,1);
end
nused = sum(iused);
psizr_err = psizr - psizr_pla - psizr_app - psizr_halo;
fluxerror = max(abs(psizr_err(iused)/(psimag-psibry)));

if calculate_profiles == 1
  calculate_profile_responses = 0;
  gs_profiles
end

ys = mss*[ic;iv] + [mpc mpv]'*pcurrt(:);

% Construct output vector y
gs_output
y = lae.y;

% Remember last analyzed equilibrium
lae.plasma    = plasma;
lae.psizr_err = psizr_err;
lae.psibarzr  = psibarzr;
lae.psizr     = psizr;
lae.ic        = ic;
lae.iv        = iv;
lae.sp        = sp;
lae.sf        = sf;
lae.li        = li;
lae.Wth       = Wth;
lae.betap     = betap;
lae.cpasma    = cpasma;
lae.rcur      = rcur;
lae.zcur      = zcur;
lae.bdefs     = bdefs;
lae.nulls     = nulls;
lae.psibry    = psibry;
lae.psimag    = psimag;
lae.rsurf     = rsurf;
lae.aminor    = aminor;
lae.rbbbs     = rbbbs;
lae.zbbbs     = zbbbs;
lae.nbbbs     = nbbbs;
lae.rbdef     = rbdef;
lae.zbdef     = zbdef;
lae.iib       = iib;
lae.wb        = wb;
lae.rmaxis    = rmaxis;
lae.zmaxis    = zmaxis;
lae.iia       = iia;
lae.wa        = wa;
lae.ys        = ys;

if 0
psizr_app_r = [zeros(nz,1) psizr_app(:,3:end)-psizr_app(:,1:end-2) zeros(nz,1)]/2/dr;
psizr_app_z = [zeros(1,nr);psizr_app(3:end,:)-psizr_app(1:end-2,:);zeros(1,nr)]/2/dz;
psizr_app_zz = [zeros(1,nr);psizr_app_z(3:end,:)-psizr_app_z(1:end-2,:);zeros(1,nr)]/2/dz;
pcurrt_z = [zeros(1,nr);pcurrt(3:end,:)-pcurrt(1:end-2,:);zeros(1,nr)]/2/dz;
h = psizr_app_z(:)'*pcurrt(:)/(psizr_app_z(:)'*pcurrt_z(:))
psizr_pla_r = [zeros(nz,1) psizr_pla(:,3:end)-psizr_pla(:,1:end-2) zeros(nz,1)]/2/dr;
psizr_pla_z = [zeros(1,nr);psizr_pla(3:end,:)-psizr_pla(1:end-2,:);zeros(1,nr)]/2/dz;

psizr_r = [zeros(nz,1) psizr(:,3:end)-psizr(:,1:end-2) zeros(nz,1)]/dr/2;
psizr_z = [zeros(1,nr);psizr(3:end,:)-psizr(1:end-2,:);zeros(1,nr)]/dz/2;
psizr_rr =[zeros(nz,1) psizr(:,3:end)+psizr(:,1:end-2)-2*psizr(:,2:end-1) zeros(nz,1)]/dr^2;
psizr_zz =[zeros(1,nr);psizr(3:end,:)+psizr(1:end-2,:)-2*psizr(2:end-1,:);zeros(1,nr)]/dz^2;
end
