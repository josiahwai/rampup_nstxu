%  USAGE:   gs_response
%
%  PURPOSE: Calculate how the plasma responds to the independent variables (x)
%           The independent variables are:
%           conductor currents ic; iv
%           profile spline parameters: sp; sf
%           fraction remaining flux error: er
%
%  INPUTS: several variables generated by gs_eq_analysis are needed
%
%  OUTPUTS: Responses of several quantities d*dx
%	
%  METHOD: 
	
%  NOTES:  
	
%
%  WRITTEN BY:  Anders Welander  ON	4/2/13
%
%  MODIFICATION HISTORY:				
%	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% drawnow executes in 2 ms when nothing to do, done every 100 ms with drawoften
if ~exist('drawoften','var') | isempty(drawoften)
  drawoften = 0;
end

response_count = response_count+1;
if isfield(index_in_y,'response_count')
  lae.y(index_in_y.response_count) = response_count;
end

if plasma
  if nbbbs > 0
    gs_edge_response
    gs_cell_response
  end
  
  dAcelldpsizr = zeros(ngg);
  dRAcelldpsizr = zeros(ngg);
  dARcelldpsizr = zeros(ngg);

  if drawoften
    drawnow
  end

  % dAcelldpsizr
  for ig = 1:ngg
    if ncell(ig) > 0
      for j = 1:nbbbs
	if dAcelldrbbbs(ig,j) ~= 0 | dAcelldzbbbs(ig,j)
	  if gbbbs(j) == 1
	    dAcelldpsizr(ig,iib) = dAcelldpsizr(ig,iib) + ...
	      dAcelldzbbbs(ig,j)*wb/dpsibbbsdz(j);
	    dAcelldpsizr(ig,ibbbs(j)+iz4) = dAcelldpsizr(ig,ibbbs(j)+iz4) - ...
	      dAcelldzbbbs(ig,j)*wbbbs(j,:)/dpsibbbsdz(j);
	  elseif gbbbs(j) == nz
	    dAcelldpsizr(ig,iib) = dAcelldpsizr(ig,iib) + ...
	      dAcelldrbbbs(ig,j)*wb/dpsibbbsdr(j);
	    dAcelldpsizr(ig,ibbbs(j)+ir4) = dAcelldpsizr(ig,ibbbs(j)+ir4) - ...
	      dAcelldrbbbs(ig,j)*wbbbs(j,:)/dpsibbbsdr(j);
	  elseif gbbbs(j) == 0
	    dAcelldpsizr(ig,iib) = dAcelldpsizr(ig,iib) + ...
	      dAcelldrbbbs(ig,j)*drbdefdpsi+dAcelldzbbbs(ig,j)*dzbdefdpsi;
	  elseif gbbbs(j) > 0 & gbbbs(j) < 1
	    i = round(gbbbs(j)*10);
	    iix = xwannabe.ii(i,:);
	    dAcelldpsizr(ig,iib) = dAcelldpsizr(ig,iib) + ...
	      dAcelldrbbbs(ig,j)*drbdpsib(i,:)+dAcelldzbbbs(ig,j)*dzbdpsib(i,:);
	    dAcelldpsizr(ig,iia) = dAcelldpsizr(ig,iia) + ...
	      dAcelldrbbbs(ig,j)*drbdpsia(i,:)+dAcelldzbbbs(ig,j)*dzbdpsia(i,:);
	    dAcelldpsizr(ig,iix) = dAcelldpsizr(ig,iix) + ...
	      dAcelldrbbbs(ig,j)*drbdpsix(i,:)+dAcelldzbbbs(ig,j)*dzbdpsix(i,:);
	    dAcelldpsizr(ig,ibbbs(j)+neighbors) = dAcelldpsizr(ig,ibbbs(j)+neighbors) + ...
	      dAcelldrbbbs(ig,j)*drbdpsip(i,:)+dAcelldzbbbs(ig,j)*dzbdpsip(i,:);
	  elseif gbbbs(j) < 0
            i = -gbbbs(j);
	    dAcelldpsizr(ig,iib) = dAcelldpsizr(ig,iib) + ...
	      dAcelldrbbbs(ig,j)*drb3dpsib(i,:)+dAcelldzbbbs(ig,j)*dzb3dpsib(i,:);
	    dAcelldpsizr(ig,iia) = dAcelldpsizr(ig,iia) + ...
	      dAcelldrbbbs(ig,j)*drb3dpsia(i,:)+dAcelldzbbbs(ig,j)*dzb3dpsia(i,:);
	    dAcelldpsizr(ig,ibbbs(j)+neighbors) = dAcelldpsizr(ig,ibbbs(j)+neighbors) + ...
	      dAcelldrbbbs(ig,j)*drb3dpsip(i,:)+dAcelldzbbbs(ig,j)*dzb3dpsip(i,:);
	  end
	end
      end
    end
  end
  
  % dRAcelldpsizr
  for ig = 1:ngg
    if ncell(ig) > 0
      for j = 1:nbbbs
	if dRAcelldrbbbs(ig,j) ~= 0 | dRAcelldzbbbs(ig,j)
	  if gbbbs(j) == 1
	    dRAcelldpsizr(ig,iib) = dRAcelldpsizr(ig,iib) + ...
	      dRAcelldzbbbs(ig,j)*wb/dpsibbbsdz(j);
	    dRAcelldpsizr(ig,ibbbs(j)+iz4) = dRAcelldpsizr(ig,ibbbs(j)+iz4) - ...
	      dRAcelldzbbbs(ig,j)*wbbbs(j,:)/dpsibbbsdz(j);
	  elseif gbbbs(j) == nz
	    dRAcelldpsizr(ig,iib) = dRAcelldpsizr(ig,iib) + ...
	      dRAcelldrbbbs(ig,j)*wb/dpsibbbsdr(j);
	    dRAcelldpsizr(ig,ibbbs(j)+ir4) = dRAcelldpsizr(ig,ibbbs(j)+ir4) - ...
	      dRAcelldrbbbs(ig,j)*wbbbs(j,:)/dpsibbbsdr(j);
	  elseif gbbbs(j) == 0
	    dRAcelldpsizr(ig,iib) = dRAcelldpsizr(ig,iib) + ...
	      dRAcelldrbbbs(ig,j)*drbdefdpsi+dRAcelldzbbbs(ig,j)*dzbdefdpsi;
	  elseif gbbbs(j) > 0 & gbbbs(j) < 1
	    i = round(gbbbs(j)*10);
	    iix = xwannabe.ii(i,:);
	    dRAcelldpsizr(ig,iib) = dRAcelldpsizr(ig,iib) + ...
	      dRAcelldrbbbs(ig,j)*drbdpsib(i,:)+dRAcelldzbbbs(ig,j)*dzbdpsib(i,:);
	    dRAcelldpsizr(ig,iia) = dRAcelldpsizr(ig,iia) + ...
	      dRAcelldrbbbs(ig,j)*drbdpsia(i,:)+dRAcelldzbbbs(ig,j)*dzbdpsia(i,:);
	    dRAcelldpsizr(ig,iix) = dRAcelldpsizr(ig,iix) + ...
	      dRAcelldrbbbs(ig,j)*drbdpsix(i,:)+dRAcelldzbbbs(ig,j)*dzbdpsix(i,:);
	    dRAcelldpsizr(ig,ibbbs(j)+neighbors) = dRAcelldpsizr(ig,ibbbs(j)+neighbors) + ...
	      dRAcelldrbbbs(ig,j)*drbdpsip(i,:)+dRAcelldzbbbs(ig,j)*dzbdpsip(i,:);
	  elseif gbbbs(j) < 0
            i = -gbbbs(j);
	    dRAcelldpsizr(ig,iib) = dRAcelldpsizr(ig,iib) + ...
	      dRAcelldrbbbs(ig,j)*drb3dpsib(i,:)+dRAcelldzbbbs(ig,j)*dzb3dpsib(i,:);
	    dRAcelldpsizr(ig,iia) = dRAcelldpsizr(ig,iia) + ...
	      dRAcelldrbbbs(ig,j)*drb3dpsia(i,:)+dRAcelldzbbbs(ig,j)*dzb3dpsia(i,:);
	    dRAcelldpsizr(ig,ibbbs(j)+neighbors) = dRAcelldpsizr(ig,ibbbs(j)+neighbors) + ...
	      dRAcelldrbbbs(ig,j)*drb3dpsip(i,:)+dRAcelldzbbbs(ig,j)*dzb3dpsip(i,:);
	  end
	end
      end
    end
  end

  % dARcelldpsizr
  for ig = 1:ngg
    if ncell(ig) > 0
      for j = 1:nbbbs
	if dARcelldrbbbs(ig,j) ~= 0 | dARcelldzbbbs(ig,j)
	  if gbbbs(j) == 1
	    dARcelldpsizr(ig,iib) = dARcelldpsizr(ig,iib) + ...
	      dARcelldzbbbs(ig,j)*wb/dpsibbbsdz(j);
	    dARcelldpsizr(ig,ibbbs(j)+iz4) = dARcelldpsizr(ig,ibbbs(j)+iz4) - ...
	      dARcelldzbbbs(ig,j)*wbbbs(j,:)/dpsibbbsdz(j);
	  elseif gbbbs(j) == nz
	    dARcelldpsizr(ig,iib) = dARcelldpsizr(ig,iib) + ...
	      dARcelldrbbbs(ig,j)*wb/dpsibbbsdr(j);
	    dARcelldpsizr(ig,ibbbs(j)+ir4) = dARcelldpsizr(ig,ibbbs(j)+ir4) - ...
	      dARcelldrbbbs(ig,j)*wbbbs(j,:)/dpsibbbsdr(j);
	  elseif gbbbs(j) == 0
	    dARcelldpsizr(ig,iib) = dARcelldpsizr(ig,iib) + ...
	      dARcelldrbbbs(ig,j)*drbdefdpsi+dARcelldzbbbs(ig,j)*dzbdefdpsi;
	  elseif gbbbs(j) > 0 & gbbbs(j) < 1
	    i = round(gbbbs(j)*10);
	    iix = xwannabe.ii(i,:);
	    dARcelldpsizr(ig,iib) = dARcelldpsizr(ig,iib) + ...
	      dARcelldrbbbs(ig,j)*drbdpsib(i,:)+dARcelldzbbbs(ig,j)*dzbdpsib(i,:);
	    dARcelldpsizr(ig,iia) = dARcelldpsizr(ig,iia) + ...
	      dARcelldrbbbs(ig,j)*drbdpsia(i,:)+dARcelldzbbbs(ig,j)*dzbdpsia(i,:);
	    dARcelldpsizr(ig,iix) = dARcelldpsizr(ig,iix) + ...
	      dARcelldrbbbs(ig,j)*drbdpsix(i,:)+dARcelldzbbbs(ig,j)*dzbdpsix(i,:);
	    dARcelldpsizr(ig,ibbbs(j)+neighbors) = dARcelldpsizr(ig,ibbbs(j)+neighbors) + ...
	      dARcelldrbbbs(ig,j)*drbdpsip(i,:)+dARcelldzbbbs(ig,j)*dzbdpsip(i,:);
	  elseif gbbbs(j) < 0
            i = -gbbbs(j);
	    dARcelldpsizr(ig,iib) = dARcelldpsizr(ig,iib) + ...
	      dARcelldrbbbs(ig,j)*drb3dpsib(i,:)+dARcelldzbbbs(ig,j)*dzb3dpsib(i,:);
	    dARcelldpsizr(ig,iia) = dARcelldpsizr(ig,iia) + ...
	      dARcelldrbbbs(ig,j)*drb3dpsia(i,:)+dARcelldzbbbs(ig,j)*dzb3dpsia(i,:);
	    dARcelldpsizr(ig,ibbbs(j)+neighbors) = dARcelldpsizr(ig,ibbbs(j)+neighbors) + ...
	      dARcelldrbbbs(ig,j)*drb3dpsip(i,:)+dARcelldzbbbs(ig,j)*dzb3dpsip(i,:);
	  end
	end
      end
    end
  end

  if drawoften
    drawnow
  end
  
  dpsiba = psibry-psimag;
  
  % Calculate derivatives of pprime and ffprim w.r.t. psizr
  Pbis = (2*p2(iknot)+6*p3(iknot).*psibarzr)*twopi^2/dpsiba^2;
  Gbis = (2*f2(iknot)+6*f3(iknot).*psibarzr)*twopi^2/dpsiba^2;
  
  dpcurrtdpsizr = zeros(ngg);
  dpcoredpsi = RA.*Pbis+AR.*Gbis/mu0;
  dpcurrtdpsizr(1:ngg+1:ngg*ngg) = dpcoredpsi/twopi;

  dumzr = RA.*pprimezr+AR.*ffprimzr/mu0;

  dpcurrtdpsizr(:,iib) = dpcurrtdpsizr(:,iib) - ...
    ((RA(:).*Pbis(:)+AR(:).*Gbis(:)/mu0).*psibarzr(:)/twopi     + dumzr(:)/dpsiba)*wb;

  dpcurrtdpsizr(:,iia) = dpcurrtdpsizr(:,iia) - ...
    ((RA(:).*Pbis(:)+AR(:).*Gbis(:)/mu0).*(1-psibarzr(:))/twopi - dumzr(:)/dpsiba)*wa;

  for j = 1:ngg
    if ncell(j) > 0
      % The surface integrals of R and of 1/R change for partly covered cells
      dpcurrtdpsizr(j,:) = dpcurrtdpsizr(j,:) + ...
                           pprime(nr)    *dRAcelldpsizr(j,:) + ...
			   ffprim(nr)/mu0*dARcelldpsizr(j,:);
      % Edge current density changes with psimag-psibry, affecting partly covered cells
      if iplasma(j)
	dum = ( (RAcell(j)-RA(j)) * pprime(nr) +          ...
        	(ARcell(j)-AR(j)) * ffprim(nr)/mu0 ) / dpsiba;
      else
	dum = (RAcell(j) * pprime(nr) + ARcell(j) * ffprim(nr)/mu0) / dpsiba;
      end
      dpcurrtdpsizr(j,iib) = dpcurrtdpsizr(j,iib) - dum*wb;
      dpcurrtdpsizr(j,iia) = dpcurrtdpsizr(j,iia) + dum*wa;
    end
  end

  if drawoften
    drawnow
  end

  % Making dpcurrtds
  c1p = twopi/dpsiba*c1;
  c2p = twopi/dpsiba*c2;
  c3p = twopi/dpsiba*c3;
  c1f = c1p/mu0;
  c2f = c2p/mu0;
  c3f = c3p/mu0;
  if nbbbs > 1
    ps2 = 2*psibarzr(:)*ones(1,nkn+2);
    ps3 = 3*psibarzr(:).^2*ones(1,nkn+2);
    c1pzr = reshape(c1p(iknot,:),ngg,nkn+2);
    c2pzr = reshape(c2p(iknot,:),ngg,nkn+2);
    c3pzr = reshape(c3p(iknot,:),ngg,nkn+2);
    c1fzr = reshape(c1f(iknot,:),ngg,nkn+2);
    c2fzr = reshape(c2f(iknot,:),ngg,nkn+2);
    c3fzr = reshape(c3f(iknot,:),ngg,nkn+2);

    dpcurrtds = [RA(:)*ones(1,nkn+2).*(c1pzr+c2pzr.*ps2+c3pzr.*ps3) ...
        	 AR(:)*ones(1,nkn+2).*(c1fzr+c2fzr.*ps2+c3fzr.*ps3)];  
  else % In this case the plasma area = Ag
    dpcurrtds = zeros(ngg,ns);
    dpcurrtds(iia,:) = [wa'.*RA(iia)*c1p(1,:) wa'.*AR(iia)*c1f(1,:)];  
  end
  

  if drawoften
    drawnow
  end
  
  % How modification of pcurrt in edge cells changes by change in pprime, ffprim at psibry
  dump = reshape(c1p(nkn,:)+2*c2p(nkn,:)+3*c3p(nkn,:),1,nkn+2);
  dumf = reshape(c1f(nkn,:)+2*c2f(nkn,:)+3*c3f(nkn,:),1,nkn+2);
  for j = 1:ngg
    if ncell(j) > 0
      if iplasma(j)
	dumpf = [(RAcell(j)-RA(j))*dump (ARcell(j)-AR(j))*dumf];
	for k = 1:ns
          dpcurrtds(j,k) = dpcurrtds(j,k) + dumpf(k);
	end
      else
	dpcurrtds(j,:) = ...
          [RAcell(j)*(c1p(nkn,:)+2*c2p(nkn,:)+3*c3p(nkn,:)) ...
	   ARcell(j)*(c1f(nkn,:)+2*c2f(nkn,:)+3*c3f(nkn,:))];
      end
    end
  end

  % Making dpsizrdpsizrapp
  dpsizrdpsizrapp = eye(ngg);
  iused = any(dpcurrtdpsizr)';
  nused = sum(iused);
  M(iused,iused) = eye(nused) - ...
                   dpsizrpladpcurrt(iused,iused)*dpcurrtdpsizr(iused,iused);

  if drawoften
    drawnow
  end

  dpsizrdpsizrapp(iused,iused) = M(iused,iused)\eye(nused);

  if drawoften
    drawnow
  end

  dpsizrdpsizrapp(~iused,iused) = dpsizrpladpcurrt(~iused,iused) * ...
                                  dpcurrtdpsizr(iused,iused)     * ...
				  dpsizrdpsizrapp(iused,iused);


  if drawoften
    drawnow
  end

  dcpasmadpsizr = sum(dpcurrtdpsizr);
  if cpasma == 0
    dpsipladpsizr = zeros(1,ngg);
    dpsipladpsizr(iia) = wa;
  else
    dpsipladpsizr = (pcurrt(:)' + psizr(:)'*dpcurrtdpsizr - psipla*dcpasmadpsizr)/cpasma;
  end
  dVtotdpsizr = 2*pi*sum(dRAcelldpsizr);
  dWthdpsizr = 1.5*RA(:)'.*pprimezr(:)';
  dWthdpsizr(1,iia) = dWthdpsizr(1,iia) - 1.5*RA(:)'.*(1-psibarzr(:)')*pprimezr(:)*wa;
  dWthdpsizr(1,iib) = dWthdpsizr(1,iib) - 1.5*RA(:)'.*psibarzr(:)'*pprimezr(:)*wb;

  % Response of contour length to psizr
  dCldpsizr = zeros(1,ngg); % = sum( (dDX.*DX./cpieces + dDY.*DY./cpieces) )
  if nbbbs > 1
    dCldrbbbs(1:nbbbs-1) = -diff(DX([nbbbs-1 1:nbbbs-1])./cpieces([nbbbs-1 1:nbbbs-1]));
    dCldzbbbs(1:nbbbs-1) = -diff(DY([nbbbs-1 1:nbbbs-1])./cpieces([nbbbs-1 1:nbbbs-1]));
  end
  for j = 1:nbbbs-1
    if gbbbs(j) == 1 % Only DY(j-1:j) are changed
      dCldpsizr(1,iib) = dCldpsizr(1,iib) + dCldzbbbs(j)/dpsibbbsdz(j)*wb;
      dCldpsizr(1,ibbbs(j)+iz4) = dCldpsizr(1,ibbbs(j)+iz4) - dCldzbbbs(j)/dpsibbbsdz(j)*wbbbs(j,:);
    elseif gbbbs(j) == nz % Only DX(j-1:j) are changed
      dCldpsizr(1,iib) = dCldpsizr(1,iib) + dCldrbbbs(j)/dpsibbbsdr(j)*wb;
      dCldpsizr(1,ibbbs(j)+ir4) = dCldpsizr(1,ibbbs(j)+ir4) - dCldrbbbs(j)/dpsibbbsdr(j)*wbbbs(j,:);
    elseif gbbbs(j) == 0
      dCldpsizr(1,iib) = dCldpsizr(1,iib) + ...
	dCldrbbbs(j)*drbdefdpsi + dCldzbbbs(j)*dzbdefdpsi;
    elseif gbbbs(j) > 0 & gbbbs(j) < 1
      i = round(gbbbs(j)*10);
      iip = ibbbs(j)+neighbors;
      iix = xwannabe.ii(i,:);
      dCldpsizr(1,iip ) = dCldpsizr(1,iip ) + ...
	dCldrbbbs(j)*drbdpsip(i,:) + dCldzbbbs(j)*dzbdpsip(i,:);
      dCldpsizr(1,iib ) = dCldpsizr(1,iib ) + ...
	dCldrbbbs(j)*drbdpsib(i,:) + dCldzbbbs(j)*dzbdpsib(i,:);
      dCldpsizr(1,iia ) = dCldpsizr(1,iia ) + ...
	dCldrbbbs(j)*drbdpsia(i,:) + dCldzbbbs(j)*dzbdpsia(i,:);
      dCldpsizr(1,iix) = dCldpsizr(1,iix) + ...
	dCldrbbbs(j)*drbdpsix(i,:) + dCldzbbbs(j)*dzbdpsix(i,:);
    elseif gbbbs(j) < 0
      iip = ibbbs(j)+neighbors;
      i = -gbbbs(j);
      dCldpsizr(1,iip) = dCldpsizr(1,iip) + ...
	dCldrbbbs(j)*drb3dpsip(i,:) + dCldzbbbs(j)*dzb3dpsip(i,:);
      dCldpsizr(1,iib) = dCldpsizr(1,iib) + ...
	dCldrbbbs(j)*drb3dpsib(i,:) + dCldzbbbs(j)*dzb3dpsib(i,:);
      dCldpsizr(1,iia) = dCldpsizr(1,iia) + ...
	dCldrbbbs(j)*drb3dpsia(i,:) + dCldzbbbs(j)*dzb3dpsia(i,:);
    end
  end

  if cpasma ~= 0 && Cl > 0
    dbp2flxdpsizr = 2*bp2flx*(dcpasmadpsizr/cpasma - dCldpsizr/Cl);
  else
    dbp2flxdpsizr = zeros(1,ngg);
  end

  if drawoften
    drawnow
  end

  dumzr = volumezr/twopi/pi./rgg.^2;

  dBp2Vdpsizr = twopi*Bp2zr(:)'*dRAcelldpsizr + reshape( ...
    [zeros(nz,1) dumzr(:,1:nr-2).*psizr_r(:,1:nr-2)-dumzr(:,3:nr).*psizr_r(:,3:nr) zeros(nz,1)]/(2*dr) + ...
    [zeros(1,nr);dumzr(1:nz-2,:).*psizr_z(1:nz-2,:)-dumzr(3:nz,:).*psizr_z(3:nz,:);zeros(1,nr)]/(2*dz),1,ngg);

  % Making response to spline parameters (s)
  dcpasmads = sum(dpcurrtds);
  if cpasma == 0
    dpsiplads = zeros(1,ns);
  else
    dpsiplads = (psizr(:)'*dpcurrtds - psipla*dcpasmads)/cpasma;
  end
  dWthds = zeros(1,2*nkn+4);
  for j = 1:nkn+2
    dWthds(1,j) = 3*pi*RA(:)'*(...
	c0(iknot,j) + ...
	c1(iknot,j).*psibarzr(:)   + ...
	c2(iknot,j).*psibarzr(:).^2+ ...
	c3(iknot,j).*psibarzr(:).^3);
  end

  if cpasma ~= 0
    dbp2flxds = 2*bp2flx*dcpasmads/cpasma;
  else
    dbp2flxds = zeros(1,ns);
  end

  if bp2flx > 0
    dbetapdpsizr = 4/3*mu0/Vtot/bp2flx*dWthdpsizr-betap*(dVtotdpsizr/Vtot+dbp2flxdpsizr/bp2flx);
    dlidpsizr = li*(dBp2Vdpsizr/Bp2V-dVtotdpsizr/Vtot-dbp2flxdpsizr/bp2flx);
    dbetapds = 4/3*mu0/Vtot/bp2flx*dWthds-betap/bp2flx*dbp2flxds;
    dlids = -li*dbp2flxds/bp2flx;
  else
    dbetapdpsizr = zeros(1,ngg);
    dlidpsizr = zeros(1,ngg);
    dbetapds = zeros(1,ns);
    dlids = zeros(1,ns);
  end

  % Making dpsizrdx
  dpsizrdx = dpsizrdpsizrapp*[mpc mpv dpsizrpladpcurrt*dpcurrtds psizr_err(:)];
  er = 1; % This is fraction of dpsizrdx(:,nx) left to subtract

  % Making dpcurrtdx
  dpcurrtdx = dpcurrtdpsizr*dpsizrdx;
  dpcurrtdx(:,nc+nv+(1:2*nkn+4)) = dpcurrtdx(:,nc+nv+(1:2*nkn+4)) + dpcurrtds;

  dpsibrydx = wb*dpsizrdx(iib,:);
  dpsimagdx = wa*dpsizrdx(iia,:);

  dcpasmadx = dcpasmadpsizr*dpsizrdx;
      dlidx =     dlidpsizr*dpsizrdx;
   dbetapdx =  dbetapdpsizr*dpsizrdx;
  dpsipladx = dpsipladpsizr*dpsizrdx;
  dbp2flxdx = dbp2flxdpsizr*dpsizrdx;
     dWthdx =    dWthdpsizr*dpsizrdx;

  dcpasmadx([indsp indsf]) = dcpasmadx([indsp indsf]) + dcpasmads;
      dlidx([indsp indsf]) =     dlidx([indsp indsf]) + dlids;
   dbetapdx([indsp indsf]) =  dbetapdx([indsp indsf]) + dbetapds;
  dpsipladx([indsp indsf]) = dpsipladx([indsp indsf]) + dpsiplads;
  dbp2flxdx([indsp indsf]) = dbp2flxdx([indsp indsf]) + dbp2flxds;
     dWthdx([indsp indsf]) =    dWthdx([indsp indsf]) + dWthds;
  
%  psiplaapp = psizr_app(:)'*pcurrt(:)/cpasma;
  dpsiplaappdx = (pcurrt(:)'*[mpc mpv zeros(ngg,ns+1)] + ...
                  psizr_app(:)'*dpcurrtdx)/cpasma - ...
		  psiplaapp/cpasma*dcpasmadx;

  drmaxisdx = drmaxisdpsi*dpsizrdx(iia,:);
  dzmaxisdx = dzmaxisdpsi*dpsizrdx(iia,:);

  drbdefdx = drbdefdpsi*dpsizrdx(iib,:);
  dzbdefdx = dzbdefdpsi*dpsizrdx(iib,:);

  drcurdx = rgg(:)'*dpcurrtdx/cpasma-rcur/cpasma*dcpasmadx;
  dzcurdx = zgg(:)'*dpcurrtdx/cpasma-zcur/cpasma*dcpasmadx;

  % Reduce dimension of full state vector to x3 = [ic;iv;cp;cf;cg;er]
  % which maps onto the full vector as [ic;iv;cp*sp0;cf*sf0+cg*sg0;er]
  % x1 = [ic;iv;cpasma;li;betap;er] OR [ic;iv;cpasma;li;Wth;er]
  % x3 = [ic;iv;cp    ;cf;cg   ;er]

  dcpasmadx3 = [dcpasmadx(indis)     ... 
        	dcpasmadx(indsp)*sp0 ...
        	dcpasmadx(indsf)*sf0 ...
		dcpasmadx(indsf)*sg0 ...
		dcpasmadx(inder)];

  dlidx3 = [dlidx(indis)     ...
            dlidx(indsp)*sp0 ...
            dlidx(indsf)*sf0 ...
	    dlidx(indsf)*sg0 ...
	    dlidx(inder)];

  dbetapdx3 = [dbetapdx(1:nc+nv)   ...
               dbetapdx(indsp)*sp0 ...
               dbetapdx(indsf)*sf0 ...
	       dbetapdx(indsf)*sg0 ...
	       dbetapdx(inder)];

  dWthdx3 = [dWthdx(1:nc+nv)   ...
               dWthdx(indsp)*sp0 ...
               dWthdx(indsf)*sf0 ...
	       dWthdx(indsf)*sg0 ...
	       dWthdx(inder)];
  
  if plasma  
    % Deal with poor conditions. This method faster than pinv(dx1dx3)
    if constraints == 1 % Normalize by cpasma to improve condition
      dx1dx3c = [[eye(nc+nv) zeros(nc+nv,4)]; ...
        dcpasmadx3/cpasma; dlidx3; dbetapdx3; [zeros(1,nc+nv+3) 1]];
      dx3dx1 = inv(dx1dx3c);
      dx3dx1(:,nc+nv+1) = dx3dx1(:,nc+nv+1)/cpasma;  
    else % Normalize by Wth as well if used instead of betap
      dx1dx3c = [[eye(nc+nv) zeros(nc+nv,4)]; ...
        dcpasmadx3/cpasma; dlidx3; dWthdx3/Wth; [zeros(1,nc+nv+3) 1]];
      dx3dx1 = inv(dx1dx3c);
      dx3dx1(:,nc+nv+1) = dx3dx1(:,nc+nv+1)/cpasma;  
      dx3dx1(:,nc+nv+3) = dx3dx1(:,nc+nv+3)/Wth;  
    end
  else
    dx3dx1 = [[eye(nc+nv) zeros(nc+nv,4)]; zeros(4,nc+nv+4)];	      
  end

  dxdx3 = [[eye(nc+nv) zeros(nc+nv,4)]; ...
	  sp0*[zeros(1,nc+nv) 1 0 0 0]; ...
	  sf0*[zeros(1,nc+nv) 0 1 0 0]+ ...
	  sg0*[zeros(1,nc+nv) 0 0 1 0]; ...
	      [zeros(1,nc+nv+3) 1]   ];

  dxdxc = dxdx3*dx3dx1;

  drbbbsdx = zeros(nbbbs_max,nx);
  dzbbbsdx = zeros(nbbbs_max,nx);
  for j = 1:nbbbs
    if gbbbs(j) == 1
      dzbbbsdx(j,:) = dpsibrydx/dpsibbbsdz(j)-wbbbs(j,:)/dpsibbbsdz(j)*dpsizrdx(ibbbs(j)+iz4,:);
    elseif gbbbs(j) == nz
      drbbbsdx(j,:) = dpsibrydx/dpsibbbsdr(j)-wbbbs(j,:)/dpsibbbsdr(j)*dpsizrdx(ibbbs(j)+ir4,:);
    elseif gbbbs(j) == 0
      drbbbsdx(j,:) = drbdefdpsi*dpsizrdx(iib,:);
      dzbbbsdx(j,:) = dzbdefdpsi*dpsizrdx(iib,:);
    elseif gbbbs(j) > 0 & gbbbs(j) < 1
      i = round(gbbbs(j)*10);
      iip = ibbbs(j)+neighbors;
      iix = xwannabe.ii(i,:);
      drbbbsdx(j,:) = drbdpsip(i,:)*dpsizrdx(iip,:) + ...
                      drbdpsix(i,:)*dpsizrdx(iix,:) +  ...
                      drbdpsia(i,:)*dpsizrdx(iia,:) + ...
		      drbdpsib(i,:)*dpsizrdx(iib,:);
      dzbbbsdx(j,:) = dzbdpsip(i,:)*dpsizrdx(iip,:) + ...
                      dzbdpsix(i,:)*dpsizrdx(iix,:) + ...
                      dzbdpsia(i,:)*dpsizrdx(iia,:) + ...
		      dzbdpsib(i,:)*dpsizrdx(iib,:);
    elseif gbbbs(j) < 0
      iip = ibbbs(j)+neighbors;
      i = -gbbbs(j);
      drbbbsdx(j,:) = drb3dpsip(i,:)*dpsizrdx(iip,:) + ...
                      drb3dpsia(i,:)*dpsizrdx(iia,:)+drb3dpsib(i,:)*dpsizrdx(iib,:);
      dzbbbsdx(j,:) = dzb3dpsip(i,:)*dpsizrdx(iip,:) + ...
                      dzb3dpsia(i,:)*dpsizrdx(iia,:)+dzb3dpsib(i,:)*dpsizrdx(iib,:);
    end
  end
  drbdx = drbbbsdx;
  dzbdx = dzbbbsdx;
  for i = 1:nbbbs
    dum = dpsibbbsdr(i)^2+dpsibbbsdz(i)^2;
    if gbbbs(i) == 1
      dumnx = dpsibrydx-wbbbs(i,:)*dpsizrdx(ibbbs(i)+iz4,:);      
      drbdx(i,:) = dpsibbbsdr(i)/dum*dumnx;
      dzbdx(i,:) = dpsibbbsdz(i)/dum*dumnx;
    end
    if gbbbs(i) == nz
      dumnx = dpsibrydx-wbbbs(i,:)*dpsizrdx(ibbbs(i)+ir4,:);      
      drbdx(i,:) = dpsibbbsdr(i)/dum*dumnx;
      dzbdx(i,:) = dpsibbbsdz(i)/dum*dumnx;
    end
  end
  
  if (rbbbso-rbdef)^2/dr^2+(zbbbso-zbdef)^2/dz^2 < 0.01
    drbbbsodx = drbdefdx;
  else
    drbbbsodx = (dpsibrydx-wo*dpsizrdx(iio,:))/(wor*psizr(iio));
  end
  if (rbbbsu-rbdef)^2/dr^2+(zbbbsu-zbdef)^2/dz^2 < 0.01
    dzbbbsudx = dzbdefdx;
  else
    dzbbbsudx = (dpsibrydx-wu*dpsizrdx(iiu,:))/(wuz*psizr(iiu));
  end
  if (rbbbsi-rbdef)^2/dr^2+(zbbbsi-zbdef)^2/dz^2 < 0.01
    drbbbsidx = drbdefdx;
  else
    drbbbsidx = (dpsibrydx-wi*dpsizrdx(iii,:))/(wir*psizr(iii));
  end
  if (rbbbsd-rbdef)^2/dr^2+(zbbbsd-zbdef)^2/dz^2 < 0.01
    dzbbbsddx = dzbdefdx;
  else
    dzbbbsddx = (dpsibrydx-wd*dpsizrdx(iid,:))/(wdz*psizr(iid));
  end
 
  dARcelldx = dARcelldpsizr*dpsizrdx;
  dLtotdx = sum(dARcelldx);
  dAcelldx = dAcelldpsizr*dpsizrdx;
  dAtotdx = sum(dAcelldx);
  dRAcelldx = dRAcelldpsizr*dpsizrdx;
  dVtotdx = 2*pi*sum(dRAcelldx);
  dfpolzrds = 1./fpolzr(:)*ones(1,nkn+2).*( c0(iknot,:) + ...
              psibarzr(:)   *ones(1,nkn+2).*c1(iknot,:) + ...
              psibarzr(:).^2*ones(1,nkn+2).*c2(iknot,:) + ...
              psibarzr(:).^3*ones(1,nkn+2).*c3(iknot,:));
  dfpolzrdx = (f1(iknot(:))+2*f2(iknot(:)).*psibarzr(:) + ...
    3*f3(iknot(:)).*psibarzr(:).^2)./fpolzr(:)*ones(1,nx).*...
    (dpsizrdx-(1-psibarzr(:))*dpsimagdx-psibarzr(:)*dpsibrydx)/dpsiba;
  dfpolzrdx(:,indsf) = dfpolzrdx(:,indsf)+dfpolzrds;
  dpsitordx = iplasma(:).*AR(:)*ones(1,nx).*dfpolzrdx;
  for j = 1:ngg
    if ncell(j) > 0
      if iplasma(j)
	dpsitordx(j,:) = dpsitordx(j,:) + dARcelldx(j,:)*fpol(nr);
      else
	dpsitordx(j,:) = dARcelldx(j,:)*fpol(nr);
      end
    end
  end
  dtorfluxdx = sum(dpsitordx);
  
  drsurfdx = (drbbbsodx+drbbbsidx)/2;
  dzsurfdx = (dzbbbsudx+dzbbbsddx)/2;
  daminordx = (drbbbsodx-drbbbsidx)/2;
  dbminordx = (dzbbbsudx-dzbbbsddx)/2;
  delongbdx = dbminordx/aminor-elongb/aminor*daminordx;
  dbtsurfdx = -btsurf/rsurf*drsurfdx;
  dip_normalizeddx = ...
    ip_normalized*(dcpasmadx/cpasma-daminordx/aminor-dbtsurfdx/btsurf);
  dbetatdx = betat*(dWthdx/Wth-dVtotdx/Vtot-2*dbtsurfdx/btsurf);
  dbetandx = betan*(dbetatdx/betat -dip_normalizeddx/ip_normalized);

  if drawoften
    drawnow
  end
  
else % No plasma
  dpsizrdx = [mpc mpv zeros(ngg,ns) psizr_err(:)];
  dpcurrtdx = zeros(ngg,nx);
  dcpasmadx = zeros(1,nx);
  daminordx = zeros(1,nx);
  dlidx = zeros(1,nx);
  dWthdx = zeros(1,nx);
  dbetapdx = zeros(1,nx);
  dbetatdx = zeros(1,nx);
  dbetandx = zeros(1,nx);
  dbp2flxdx = zeros(1,nx);
  drcurdx = zeros(1,nx);
  dzcurdx = zeros(1,nx);
  drbdefdx = zeros(1,nx);
  dzbdefdx = zeros(1,nx);
  dpsimagdx = [wa*mpc(iia,:) wa*mpv(iia,:) zeros(1,nx-nc-nv)];
  dpsibrydx = zeros(1,nx);
  dpsipladx = dpsimagdx;
  dpsiplaappdx = dpsimagdx;
  dLtotdx = zeros(1,nx);
  dAtotdx = zeros(1,nx);
  dVtotdx = zeros(1,nx);
  if constraints
    dxdxc = [eye(nc+nv) zeros(nc+nv,4); zeros(ns,nxc); zeros(1,nxc-1) 1];
  end
end


if calculate_profiles == 1
  calculate_profile_responses = 1;
  gs_profiles
end

% The response of flux at conductors
dysdx = [mpc mpv]'*dpcurrtdx;
dysdx(1:nc+nv,1:nc+nv) = dysdx(1:nc+nv,1:nc+nv)+mss;

% Construct response of the output vector, dydx
gs_output_response

new_response_was_calculated = true;

